{"ast":null,"code":"var _s = $RefreshSig$();\n/* global google */\nimport { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchNearbyAmenities } from '../utils/searchNearbyAmenities';\nconst CATEGORY_TYPE_MAP = {\n  education: ['school', 'university', 'college'],\n  grocery: ['supermarket', 'grocery_store'],\n  transport: ['train_station', 'bus_station', 'transit_station', 'light_rail_station', 'subway_station'],\n  medical: ['hospital', 'pharmacy', 'doctor', 'dentist', 'clinic'],\n  green: ['park', 'state_park', 'natural_feature'],\n  culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'theater', 'concert_hall', 'stadium'],\n  other: []\n};\nconst useGoogleMap = (mapRef, onLocationSelect, onPlacesUpdate, selectedLocation, activeCategories) => {\n  _s();\n  const mapInstance = useRef(null);\n  const nearbyMarkersRef = useRef([]);\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: 'weekly'\n    });\n    loader.load().then(async () => {\n      const {\n        Map\n      } = await google.maps.importLibrary('maps');\n      const melbourneCBD = {\n        lat: -37.8136,\n        lng: 144.9631\n      };\n      const map = new Map(mapRef.current, {\n        center: melbourneCBD,\n        zoom: 14,\n        mapId: 'feabc4fd011254f284cca2c8'\n      });\n      mapInstance.current = map;\n      map.addListener('click', event => {\n        const clickedLocation = event.latLng;\n        onLocationSelect(clickedLocation);\n      });\n    });\n  }, [mapRef, onLocationSelect]);\n  useEffect(() => {\n    if (!selectedLocation || !mapInstance.current) return;\n    nearbyMarkersRef.current.forEach(marker => marker.map = null);\n    nearbyMarkersRef.current = [];\n    let includedTypes = [];\n    if (activeCategories.includes('all')) {\n      includedTypes = Object.values(CATEGORY_TYPE_MAP).flat();\n    } else {\n      includedTypes = activeCategories.flatMap(category => CATEGORY_TYPE_MAP[category] || []);\n    }\n    searchNearbyAmenities({\n      map: mapInstance.current,\n      clickedLocation: selectedLocation,\n      radius: 800,\n      includedPrimaryTypes: includedTypes\n    }).then(({\n      places,\n      markers\n    }) => {\n      nearbyMarkersRef.current = markers;\n      onPlacesUpdate(places);\n    });\n  }, [selectedLocation, activeCategories, onPlacesUpdate]);\n};\n_s(useGoogleMap, \"RZOI6KDuVg6a2471mTonvxTxkgU=\");\nexport default useGoogleMap;","map":{"version":3,"names":["useEffect","useRef","Loader","searchNearbyAmenities","CATEGORY_TYPE_MAP","education","grocery","transport","medical","green","culture","other","useGoogleMap","mapRef","onLocationSelect","onPlacesUpdate","selectedLocation","activeCategories","_s","mapInstance","nearbyMarkersRef","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","load","then","Map","google","maps","importLibrary","melbourneCBD","lat","lng","map","current","center","zoom","mapId","addListener","event","clickedLocation","latLng","forEach","marker","includedTypes","includes","Object","values","flat","flatMap","category","radius","includedPrimaryTypes","places","markers"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/hooks/useGoogleMap.js"],"sourcesContent":["/* global google */\nimport { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchNearbyAmenities } from '../utils/searchNearbyAmenities';\n\nconst CATEGORY_TYPE_MAP = {\n  education: ['school', 'university', 'college'],\n  grocery: ['supermarket', 'grocery_store'],\n  transport: ['train_station', 'bus_station', 'transit_station', 'light_rail_station', 'subway_station'],\n  medical: ['hospital', 'pharmacy', 'doctor', 'dentist', 'clinic'],\n  green: ['park', 'state_park', 'natural_feature'],\n  culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'theater', 'concert_hall', 'stadium'],\n  other: []\n};\n\nconst useGoogleMap = (mapRef, onLocationSelect, onPlacesUpdate, selectedLocation, activeCategories) => {\n  const mapInstance = useRef(null);\n  const nearbyMarkersRef = useRef([]);\n\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: 'weekly',\n    });\n\n    loader.load().then(async () => {\n      const { Map } = await google.maps.importLibrary('maps');\n      const melbourneCBD = { lat: -37.8136, lng: 144.9631 };\n      const map = new Map(mapRef.current, {\n        center: melbourneCBD,\n        zoom: 14,\n        mapId: 'feabc4fd011254f284cca2c8',\n      });\n\n      mapInstance.current = map;\n\n      map.addListener('click', (event) => {\n        const clickedLocation = event.latLng;\n        onLocationSelect(clickedLocation);\n      });\n    });\n  }, [mapRef, onLocationSelect]);\n\n  useEffect(() => {\n    if (!selectedLocation || !mapInstance.current) return;\n\n    nearbyMarkersRef.current.forEach((marker) => marker.map = null);\n    nearbyMarkersRef.current = [];\n\n    let includedTypes = [];\n    if (activeCategories.includes('all')) {\n      includedTypes = Object.values(CATEGORY_TYPE_MAP).flat();\n    } else {\n      includedTypes = activeCategories.flatMap((category) => CATEGORY_TYPE_MAP[category] || []);\n    }\n\n    searchNearbyAmenities({\n      map: mapInstance.current,\n      clickedLocation: selectedLocation,\n      radius: 800,\n      includedPrimaryTypes: includedTypes,\n    }).then(({ places, markers }) => {\n      nearbyMarkersRef.current = markers;\n      onPlacesUpdate(places);\n    });\n  }, [selectedLocation, activeCategories, onPlacesUpdate]);\n};\n\nexport default useGoogleMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}