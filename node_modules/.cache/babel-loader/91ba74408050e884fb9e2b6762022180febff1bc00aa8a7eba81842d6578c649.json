{"ast":null,"code":"var _jsxFileName = \"/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js\";\n/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction normalizeName(name) {\n  return name.toLowerCase().replace(/building\\s*\\d+/g, '').replace(/academic|campus|centre|center|college|institute|school|university/g, '').replace(/[^a-z0-9]/g, '').trim();\n}\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\nexport async function searchNearbyAmenities({\n  map,\n  clickedLocation,\n  radius,\n  includedPrimaryTypes,\n  isMajorMode = false\n}) {\n  const {\n    Place,\n    SearchNearbyRankPreference\n  } = await google.maps.importLibrary('places');\n  const {\n    AdvancedMarkerElement\n  } = await google.maps.importLibrary('marker');\n  const CATEGORY_TYPE_MAP = {\n    education: ['school', 'primary_school', 'secondary_school', 'university'],\n    medical: ['hospital', 'doctor', 'pharmacy', 'dentist'],\n    grocery: ['supermarket', 'grocery_store', 'department_store'],\n    transport: ['train_station', 'subway_station', 'bus_station', 'transit_station', 'light_rail_station'],\n    green: ['park', 'state_park', 'campground', 'rv_park'],\n    culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'concert_hall', 'stadium']\n  };\n  const categoryReverseLookup = {};\n  for (const [category, types] of Object.entries(CATEGORY_TYPE_MAP)) {\n    for (const type of types) {\n      categoryReverseLookup[type] = category;\n    }\n  }\n  if (!isMajorMode) {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes,\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU'\n    };\n    const {\n      places = []\n    } = await Place.searchNearby(request);\n    const filteredPlaces = places.filter(place => place.businessStatus === 'OPERATIONAL');\n    const uniquePlaces = removeDuplicatePlacesByName(filteredPlaces);\n    uniquePlaces.forEach(place => {\n      var _place$types;\n      const matchedCategory = (_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types.map(t => categoryReverseLookup[t]).find(Boolean);\n      place.category = matchedCategory || 'other';\n    });\n    const markers = uniquePlaces.map((place, index) => {\n      const markerHTML = ReactDOMServer.renderToStaticMarkup(/*#__PURE__*/_jsxDEV(CustomerMarker, {\n        number: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this));\n      const wrapper = document.createElement('div');\n      wrapper.innerHTML = markerHTML;\n      return new AdvancedMarkerElement({\n        map,\n        position: place.location,\n        title: place.displayName,\n        content: wrapper.firstChild\n      });\n    });\n    return {\n      places: uniquePlaces,\n      markers\n    };\n  }\n  const categoryOrder = ['education', 'medical', 'grocery', 'transport', 'green', 'culture'];\n  const categoryPromises = categoryOrder.map(async category => {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius: 800\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes: CATEGORY_TYPE_MAP[category],\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU'\n    };\n    const {\n      places = []\n    } = await Place.searchNearby(request);\n    const filtered = places.filter(place => {\n      var _place$userRatingCoun, _place$rating;\n      return place.businessStatus === 'OPERATIONAL' && ((_place$userRatingCoun = place.userRatingCount) !== null && _place$userRatingCoun !== void 0 ? _place$userRatingCoun : 0) >= 30 && ((_place$rating = place.rating) !== null && _place$rating !== void 0 ? _place$rating : 0) >= 4.0;\n    });\n    const sorted = filtered.sort((a, b) => {\n      var _b$rating, _a$rating;\n      return ((_b$rating = b.rating) !== null && _b$rating !== void 0 ? _b$rating : 0) - ((_a$rating = a.rating) !== null && _a$rating !== void 0 ? _a$rating : 0);\n    });\n    sorted.forEach(place => place.category = category);\n    return sorted.slice(0, 3);\n  });\n  const results = (await Promise.all(categoryPromises)).flat();\n  const uniqueResults = removeDuplicatePlacesByName(results);\n  const fallbackCategorized = uniqueResults.map(place => {\n    if (!place.category) {\n      var _place$types2;\n      const matchedCategory = (_place$types2 = place.types) === null || _place$types2 === void 0 ? void 0 : _place$types2.map(t => categoryReverseLookup[t]).find(Boolean);\n      return {\n        ...place,\n        category: matchedCategory || 'other'\n      };\n    }\n    return place;\n  });\n  const markers = fallbackCategorized.map((place, index) => {\n    const markerHTML = ReactDOMServer.renderToStaticMarkup(/*#__PURE__*/_jsxDEV(CustomerMarker, {\n      number: index + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this));\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = markerHTML;\n    return new AdvancedMarkerElement({\n      map,\n      position: place.location,\n      title: place.displayName,\n      content: wrapper.firstChild\n    });\n  });\n  return {\n    places: fallbackCategorized,\n    markers\n  };\n}","map":{"version":3,"names":["ReactDOMServer","CustomerMarker","jsxDEV","_jsxDEV","normalizeName","name","toLowerCase","replace","trim","removeDuplicatePlacesByName","places","seen","Set","filter","place","norm","displayName","some","existing","includes","add","searchNearbyAmenities","map","clickedLocation","radius","includedPrimaryTypes","isMajorMode","Place","SearchNearbyRankPreference","google","maps","importLibrary","AdvancedMarkerElement","CATEGORY_TYPE_MAP","education","medical","grocery","transport","green","culture","categoryReverseLookup","category","types","Object","entries","type","request","locationRestriction","center","fields","maxResultCount","rankPreference","POPULARITY","language","searchNearby","filteredPlaces","businessStatus","uniquePlaces","forEach","_place$types","matchedCategory","t","find","Boolean","markers","index","markerHTML","renderToStaticMarkup","number","fileName","_jsxFileName","lineNumber","columnNumber","wrapper","document","createElement","innerHTML","position","location","title","content","firstChild","categoryOrder","categoryPromises","filtered","_place$userRatingCoun","_place$rating","userRatingCount","rating","sorted","sort","a","b","_b$rating","_a$rating","slice","results","Promise","all","flat","uniqueResults","fallbackCategorized","_place$types2"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js"],"sourcesContent":["/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\n\nfunction normalizeName(name) {\n  return name.toLowerCase()\n    .replace(/building\\s*\\d+/g, '')\n    .replace(/academic|campus|centre|center|college|institute|school|university/g, '')\n    .replace(/[^a-z0-9]/g, '')\n    .trim();\n}\n\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\n\nexport async function searchNearbyAmenities({ map, clickedLocation, radius, includedPrimaryTypes, isMajorMode = false }) {\n  const { Place, SearchNearbyRankPreference } = await google.maps.importLibrary('places');\n  const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');\n\n  const CATEGORY_TYPE_MAP = {\n    education: ['school', 'primary_school', 'secondary_school', 'university'],\n    medical: ['hospital', 'doctor', 'pharmacy', 'dentist'],\n    grocery: ['supermarket', 'grocery_store', 'department_store'],\n    transport: ['train_station', 'subway_station', 'bus_station', 'transit_station', 'light_rail_station'],\n    green: ['park', 'state_park', 'campground', 'rv_park'],\n    culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'concert_hall', 'stadium'],\n  };\n\n  const categoryReverseLookup = {};\n  for (const [category, types] of Object.entries(CATEGORY_TYPE_MAP)) {\n    for (const type of types) {\n      categoryReverseLookup[type] = category;\n    }\n  }\n\n  if (!isMajorMode) {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius,\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes,\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU',\n    };\n\n    const { places = [] } = await Place.searchNearby(request);\n    const filteredPlaces = places.filter(place => place.businessStatus === 'OPERATIONAL');\n    const uniquePlaces = removeDuplicatePlacesByName(filteredPlaces);\n    uniquePlaces.forEach(place => {\n      const matchedCategory = place.types?.map(t => categoryReverseLookup[t]).find(Boolean);\n      place.category = matchedCategory || 'other';\n    });\n\n    const markers = uniquePlaces.map((place, index) => {\n      const markerHTML = ReactDOMServer.renderToStaticMarkup(\n        <CustomerMarker number={index + 1} />\n      );\n      const wrapper = document.createElement('div');\n      wrapper.innerHTML = markerHTML;\n      return new AdvancedMarkerElement({\n        map,\n        position: place.location,\n        title: place.displayName,\n        content: wrapper.firstChild,\n      });\n    });\n\n    return { places: uniquePlaces, markers };\n  }\n\n  const categoryOrder = ['education', 'medical', 'grocery', 'transport', 'green', 'culture'];\n\n  const categoryPromises = categoryOrder.map(async (category) => {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius: 800,\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes: CATEGORY_TYPE_MAP[category],\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU',\n    };\n\n    const { places = [] } = await Place.searchNearby(request);\n    const filtered = places.filter(place =>\n      place.businessStatus === 'OPERATIONAL' &&\n      (place.userRatingCount ?? 0) >= 30 &&\n      (place.rating ?? 0) >= 4.0\n    );\n    const sorted = filtered.sort((a, b) => (b.rating ?? 0) - (a.rating ?? 0));\n    sorted.forEach(place => place.category = category);\n    return sorted.slice(0, 3);\n  });\n\n  const results = (await Promise.all(categoryPromises)).flat();\n  const uniqueResults = removeDuplicatePlacesByName(results);\n\n  const fallbackCategorized = uniqueResults.map(place => {\n    if (!place.category) {\n      const matchedCategory = place.types?.map(t => categoryReverseLookup[t]).find(Boolean);\n      return { ...place, category: matchedCategory || 'other' };\n    }\n    return place;\n  });\n\n  const markers = fallbackCategorized.map((place, index) => {\n    const markerHTML = ReactDOMServer.renderToStaticMarkup(\n      <CustomerMarker number={index + 1} />\n    );\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = markerHTML;\n    return new AdvancedMarkerElement({\n      map,\n      position: place.location,\n      title: place.displayName,\n      content: wrapper.firstChild,\n    });\n  });\n\n  return { places: fallbackCategorized, markers };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}