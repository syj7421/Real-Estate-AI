{"ast":null,"code":"var _jsxFileName = \"/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js\";\n/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction normalizeName(name) {\n  return name.toLowerCase().replace(/building\\s*\\d+/g, '').replace(/academic|campus|centre|center|college|institute|school|university/g, '').replace(/[^a-z0-9]/g, '').trim();\n}\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\nexport async function searchNearbyAmenities({\n  map,\n  clickedLocation,\n  radius,\n  includedPrimaryTypes,\n  isMajorMode = false\n}) {\n  const {\n    Place,\n    SearchNearbyRankPreference\n  } = await google.maps.importLibrary('places');\n  const {\n    AdvancedMarkerElement\n  } = await google.maps.importLibrary('marker');\n  const CATEGORY_TYPE_MAP = {\n    education: ['school', 'primary_school', 'secondary_school', 'university'],\n    medical: ['hospital', 'doctor', 'pharmacy', 'dentist'],\n    grocery: ['supermarket', 'grocery_store', 'department_store', 'shopping_mall'],\n    transport: ['train_station', 'subway_station', 'bus_station', 'transit_station', 'light_rail_station'],\n    green: ['park', 'state_park', 'campground', 'rv_park'],\n    culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'concert_hall', 'stadium']\n  };\n  const categoryReverseLookup = {};\n  for (const [category, types] of Object.entries(CATEGORY_TYPE_MAP)) {\n    for (const type of types) {\n      categoryReverseLookup[type] = category;\n    }\n  }\n  if (!isMajorMode) {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes,\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU'\n    };\n    const {\n      places = []\n    } = await Place.searchNearby(request);\n    const filteredPlaces = places.filter(place => {\n      var _place$userRatingCoun, _place$rating;\n      return place.businessStatus === 'OPERATIONAL' && ((_place$userRatingCoun = place.userRatingCount) !== null && _place$userRatingCoun !== void 0 ? _place$userRatingCoun : 0) >= 20 && ((_place$rating = place.rating) !== null && _place$rating !== void 0 ? _place$rating : 0) >= 3.8;\n    });\n    const uniquePlaces = removeDuplicatePlacesByName(filteredPlaces);\n    uniquePlaces.forEach(place => {\n      var _place$types;\n      const matchedCategory = (_place$types = place.types) === null || _place$types === void 0 ? void 0 : _place$types.map(t => categoryReverseLookup[t]).find(Boolean);\n      place.category = matchedCategory || 'other';\n    });\n    const markers = uniquePlaces.map((place, index) => {\n      const markerHTML = ReactDOMServer.renderToStaticMarkup(/*#__PURE__*/_jsxDEV(CustomerMarker, {\n        number: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this));\n      const wrapper = document.createElement('div');\n      wrapper.innerHTML = markerHTML;\n      return new AdvancedMarkerElement({\n        map,\n        position: place.location,\n        title: place.displayName,\n        content: wrapper.firstChild\n      });\n    });\n    return {\n      places: uniquePlaces,\n      markers\n    };\n  }\n  const results = [];\n  async function fetchPlaces(primaryTypes) {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius: 800\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes: primaryTypes,\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU'\n    };\n    const {\n      places = []\n    } = await Place.searchNearby(request);\n    return places.filter(place => {\n      var _place$rating2;\n      return place.businessStatus === 'OPERATIONAL' && ((_place$rating2 = place.rating) !== null && _place$rating2 !== void 0 ? _place$rating2 : 0) >= 3.8;\n    });\n  }\n\n  // 1. Education - include all matching\n  const eduPlaces = await fetchPlaces(CATEGORY_TYPE_MAP.education);\n  eduPlaces.forEach(place => place.category = 'education');\n  results.push(...eduPlaces);\n\n  // 2. Grocery - Coles, Woolworths, Aldi, + 1 Asian market + major center\n  const groceryPlaces = await fetchPlaces(CATEGORY_TYPE_MAP.grocery);\n  const grocerySelected = [];\n  const nameCheck = name => name.toLowerCase();\n  const addedChains = new Set();\n  for (const place of groceryPlaces.sort((a, b) => a.location.lat - b.location.lat)) {\n    const name = nameCheck(place.displayName);\n    if (/woolworths|coles|aldi/.test(name) && ![...addedChains].some(c => name.includes(c))) {\n      if (name.includes('woolworths')) addedChains.add('woolworths');\n      if (name.includes('coles')) addedChains.add('coles');\n      if (name.includes('aldi')) addedChains.add('aldi');\n      place.category = 'grocery';\n      grocerySelected.push(place);\n    } else if (/asian|oriental/.test(name) && !grocerySelected.some(p => /asian|oriental/.test(p.displayName.toLowerCase()))) {\n      place.category = 'grocery';\n      grocerySelected.push(place);\n    } else if (/mall|shopping|centre|center/.test(name)) {\n      place.category = 'grocery';\n      grocerySelected.push(place);\n    }\n    if (grocerySelected.length >= 5) break;\n  }\n  results.push(...grocerySelected);\n\n  // 3. Transport - 1 each closest\n  const transportPlaces = await fetchPlaces(CATEGORY_TYPE_MAP.transport);\n  const nearestByType = {};\n  for (const place of transportPlaces) {\n    for (const type of place.types || []) {\n      if (CATEGORY_TYPE_MAP.transport.includes(type) && !nearestByType[type]) {\n        place.category = 'transport';\n        nearestByType[type] = place;\n        break;\n      }\n    }\n  }\n  results.push(...Object.values(nearestByType));\n\n  // 4~7. Other categories max 2 by popularity\n  const others = ['medical', 'green', 'culture'];\n  for (const cat of others) {\n    const othersPlaces = await fetchPlaces(CATEGORY_TYPE_MAP[cat]);\n    const top2 = othersPlaces.sort((a, b) => {\n      var _b$rating, _a$rating;\n      return ((_b$rating = b.rating) !== null && _b$rating !== void 0 ? _b$rating : 0) - ((_a$rating = a.rating) !== null && _a$rating !== void 0 ? _a$rating : 0);\n    }).slice(0, 2);\n    top2.forEach(p => p.category = cat);\n    results.push(...top2);\n  }\n  const uniqueResults = removeDuplicatePlacesByName(results);\n  const fallbackCategorized = uniqueResults.map(place => {\n    if (!place.category) {\n      var _place$types2;\n      const matchedCategory = (_place$types2 = place.types) === null || _place$types2 === void 0 ? void 0 : _place$types2.map(t => categoryReverseLookup[t]).find(Boolean);\n      return {\n        ...place,\n        category: matchedCategory || 'other'\n      };\n    }\n    return place;\n  });\n  const markers = fallbackCategorized.map((place, index) => {\n    const markerHTML = ReactDOMServer.renderToStaticMarkup(/*#__PURE__*/_jsxDEV(CustomerMarker, {\n      number: index + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this));\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = markerHTML;\n    return new AdvancedMarkerElement({\n      map,\n      position: place.location,\n      title: place.displayName,\n      content: wrapper.firstChild\n    });\n  });\n  return {\n    places: fallbackCategorized,\n    markers\n  };\n}","map":{"version":3,"names":["ReactDOMServer","CustomerMarker","jsxDEV","_jsxDEV","normalizeName","name","toLowerCase","replace","trim","removeDuplicatePlacesByName","places","seen","Set","filter","place","norm","displayName","some","existing","includes","add","searchNearbyAmenities","map","clickedLocation","radius","includedPrimaryTypes","isMajorMode","Place","SearchNearbyRankPreference","google","maps","importLibrary","AdvancedMarkerElement","CATEGORY_TYPE_MAP","education","medical","grocery","transport","green","culture","categoryReverseLookup","category","types","Object","entries","type","request","locationRestriction","center","fields","maxResultCount","rankPreference","POPULARITY","language","searchNearby","filteredPlaces","_place$userRatingCoun","_place$rating","businessStatus","userRatingCount","rating","uniquePlaces","forEach","_place$types","matchedCategory","t","find","Boolean","markers","index","markerHTML","renderToStaticMarkup","number","fileName","_jsxFileName","lineNumber","columnNumber","wrapper","document","createElement","innerHTML","position","location","title","content","firstChild","results","fetchPlaces","primaryTypes","_place$rating2","eduPlaces","push","groceryPlaces","grocerySelected","nameCheck","addedChains","sort","a","b","lat","test","c","p","length","transportPlaces","nearestByType","values","others","cat","othersPlaces","top2","_b$rating","_a$rating","slice","uniqueResults","fallbackCategorized","_place$types2"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js"],"sourcesContent":["/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\n\nfunction normalizeName(name) {\n  return name.toLowerCase()\n    .replace(/building\\s*\\d+/g, '')\n    .replace(/academic|campus|centre|center|college|institute|school|university/g, '')\n    .replace(/[^a-z0-9]/g, '')\n    .trim();\n}\n\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\n\nexport async function searchNearbyAmenities({ map, clickedLocation, radius, includedPrimaryTypes, isMajorMode = false }) {\n  const { Place, SearchNearbyRankPreference } = await google.maps.importLibrary('places');\n  const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');\n\n  const CATEGORY_TYPE_MAP = {\n    education: ['school', 'primary_school', 'secondary_school', 'university'],\n    medical: ['hospital', 'doctor', 'pharmacy', 'dentist'],\n    grocery: ['supermarket', 'grocery_store', 'department_store', 'shopping_mall'],\n    transport: ['train_station', 'subway_station', 'bus_station', 'transit_station', 'light_rail_station'],\n    green: ['park', 'state_park', 'campground', 'rv_park'],\n    culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'concert_hall', 'stadium'],\n  };\n\n  const categoryReverseLookup = {};\n  for (const [category, types] of Object.entries(CATEGORY_TYPE_MAP)) {\n    for (const type of types) {\n      categoryReverseLookup[type] = category;\n    }\n  }\n\n  if (!isMajorMode) {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius,\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes,\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU',\n    };\n\n    const { places = [] } = await Place.searchNearby(request);\n    const filteredPlaces = places.filter(place => \n      place.businessStatus === 'OPERATIONAL' &&\n      (place.userRatingCount ?? 0) >= 20 &&\n      (place.rating ?? 0) >= 3.8\n    );\n    const uniquePlaces = removeDuplicatePlacesByName(filteredPlaces);\n    uniquePlaces.forEach(place => {\n      const matchedCategory = place.types?.map(t => categoryReverseLookup[t]).find(Boolean);\n      place.category = matchedCategory || 'other';\n    });\n\n    const markers = uniquePlaces.map((place, index) => {\n      const markerHTML = ReactDOMServer.renderToStaticMarkup(\n        <CustomerMarker number={index + 1} />\n      );\n      const wrapper = document.createElement('div');\n      wrapper.innerHTML = markerHTML;\n      return new AdvancedMarkerElement({\n        map,\n        position: place.location,\n        title: place.displayName,\n        content: wrapper.firstChild,\n      });\n    });\n\n    return { places: uniquePlaces, markers };\n  }\n\n  const results = [];\n\n  async function fetchPlaces(primaryTypes) {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius: 800,\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes: primaryTypes,\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU',\n    };\n    const { places = [] } = await Place.searchNearby(request);\n    return places.filter(place =>\n      place.businessStatus === 'OPERATIONAL' &&\n      (place.rating ?? 0) >= 3.8\n    );\n  }\n\n  // 1. Education - include all matching\n  const eduPlaces = await fetchPlaces(CATEGORY_TYPE_MAP.education);\n  eduPlaces.forEach(place => place.category = 'education');\n  results.push(...eduPlaces);\n\n  // 2. Grocery - Coles, Woolworths, Aldi, + 1 Asian market + major center\n  const groceryPlaces = await fetchPlaces(CATEGORY_TYPE_MAP.grocery);\n  const grocerySelected = [];\n  const nameCheck = name => name.toLowerCase();\n  const addedChains = new Set();\n\n  for (const place of groceryPlaces.sort((a, b) => a.location.lat - b.location.lat)) {\n    const name = nameCheck(place.displayName);\n    if ((/woolworths|coles|aldi/.test(name)) && ![...addedChains].some(c => name.includes(c))) {\n      if (name.includes('woolworths')) addedChains.add('woolworths');\n      if (name.includes('coles')) addedChains.add('coles');\n      if (name.includes('aldi')) addedChains.add('aldi');\n      place.category = 'grocery';\n      grocerySelected.push(place);\n    } else if (/asian|oriental/.test(name) && !grocerySelected.some(p => /asian|oriental/.test(p.displayName.toLowerCase()))) {\n      place.category = 'grocery';\n      grocerySelected.push(place);\n    } else if (/mall|shopping|centre|center/.test(name)) {\n      place.category = 'grocery';\n      grocerySelected.push(place);\n    }\n    if (grocerySelected.length >= 5) break;\n  }\n  results.push(...grocerySelected);\n\n  // 3. Transport - 1 each closest\n  const transportPlaces = await fetchPlaces(CATEGORY_TYPE_MAP.transport);\n  const nearestByType = {};\n  for (const place of transportPlaces) {\n    for (const type of place.types || []) {\n      if (CATEGORY_TYPE_MAP.transport.includes(type) && !nearestByType[type]) {\n        place.category = 'transport';\n        nearestByType[type] = place;\n        break;\n      }\n    }\n  }\n  results.push(...Object.values(nearestByType));\n\n  // 4~7. Other categories max 2 by popularity\n  const others = ['medical', 'green', 'culture'];\n  for (const cat of others) {\n    const othersPlaces = await fetchPlaces(CATEGORY_TYPE_MAP[cat]);\n    const top2 = othersPlaces.sort((a, b) => (b.rating ?? 0) - (a.rating ?? 0)).slice(0, 2);\n    top2.forEach(p => p.category = cat);\n    results.push(...top2);\n  }\n\n  const uniqueResults = removeDuplicatePlacesByName(results);\n  const fallbackCategorized = uniqueResults.map(place => {\n    if (!place.category) {\n      const matchedCategory = place.types?.map(t => categoryReverseLookup[t]).find(Boolean);\n      return { ...place, category: matchedCategory || 'other' };\n    }\n    return place;\n  });\n\n  const markers = fallbackCategorized.map((place, index) => {\n    const markerHTML = ReactDOMServer.renderToStaticMarkup(\n      <CustomerMarker number={index + 1} />\n    );\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = markerHTML;\n    return new AdvancedMarkerElement({\n      map,\n      position: place.location,\n      title: place.displayName,\n      content: wrapper.firstChild,\n    });\n  });\n\n  return { places: fallbackCategorized, markers };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}