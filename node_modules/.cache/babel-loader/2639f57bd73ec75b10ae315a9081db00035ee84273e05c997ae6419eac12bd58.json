{"ast":null,"code":"var _jsxFileName = \"/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js\";\n/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction normalizeName(name) {\n  return name.toLowerCase().replace(/building\\s*\\d+/g, '').replace(/academic|campus|centre|center|college|institute|school|university/g, '').replace(/[^a-z0-9]/g, '').trim();\n}\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\nexport async function searchNearbyAmenities({\n  map,\n  clickedLocation,\n  radius,\n  includedPrimaryTypes,\n  isMajorMode = false\n}) {\n  const {\n    Place,\n    SearchNearbyRankPreference\n  } = await google.maps.importLibrary('places');\n  const {\n    AdvancedMarkerElement\n  } = await google.maps.importLibrary('marker');\n  const CATEGORY_TYPE_MAP = {\n    education: ['primary_school', 'secondary_school', 'university'],\n    medical: ['hospital'],\n    // Only allow real hospitals\n    grocery: ['supermarket', 'grocery_store', 'department_store', 'shopping_mall'],\n    transport: ['train_station', 'subway_station', 'bus_station', 'transit_station', 'light_rail_station'],\n    green: ['park', 'state_park', 'campground', 'rv_park'],\n    culture: ['museum', 'library', 'art_gallery', 'stadium', 'concert_hall']\n  };\n  const categoryReverseLookup = {};\n  for (const [category, types] of Object.entries(CATEGORY_TYPE_MAP)) {\n    for (const type of types) {\n      categoryReverseLookup[type] = category;\n    }\n  }\n  if (!isMajorMode) {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes,\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU'\n    };\n    const {\n      places = []\n    } = await Place.searchNearby(request);\n\n    // 필터 기준 적용:\n    const filteredPlaces = places.filter(place => {\n      var _place$userRatingCoun, _place$rating, _place$types, _place$displayName$to, _place$displayName;\n      if (place.businessStatus !== 'OPERATIONAL') return false;\n      if (((_place$userRatingCoun = place.userRatingCount) !== null && _place$userRatingCoun !== void 0 ? _place$userRatingCoun : 0) < 2) return false;\n      if (((_place$rating = place.rating) !== null && _place$rating !== void 0 ? _place$rating : 0) < 3.8) return false;\n\n      // 카테고리별 필터 적용\n      const types = (_place$types = place.types) !== null && _place$types !== void 0 ? _place$types : [];\n\n      // education: 법적으로 보호된 명칭들만\n      if (types.some(t => CATEGORY_TYPE_MAP.education.includes(t))) {\n        return true;\n      }\n\n      // medical: 'hospital'만 허용 (의원 제외)\n      if (types.includes('hospital')) {\n        return true;\n      }\n\n      // grocery: 이름에 coles, woolworths, aldi, asian, oriental, outlet 포함 + 타입 체크\n      const name = (_place$displayName$to = (_place$displayName = place.displayName) === null || _place$displayName === void 0 ? void 0 : _place$displayName.toLowerCase()) !== null && _place$displayName$to !== void 0 ? _place$displayName$to : '';\n      if (types.some(t => CATEGORY_TYPE_MAP.grocery.includes(t)) && /coles|woolworths|aldi|asian|oriental|outlet/.test(name)) {\n        return true;\n      }\n\n      // transport: 역은 모두 허용\n      if (types.some(t => CATEGORY_TYPE_MAP.transport.includes(t))) {\n        return true;\n      }\n\n      // green: 평점 & 리뷰 높은 공원만 허용\n      if (types.some(t => CATEGORY_TYPE_MAP.green.includes(t)) && place.userRatingCount >= 20) {\n        return true;\n      }\n\n      // culture: 평점 & 리뷰 기준 충족하는 박물관, 미술관 등만 허용\n      if (types.some(t => CATEGORY_TYPE_MAP.culture.includes(t)) && place.userRatingCount >= 30 && place.rating >= 4.0) {\n        return true;\n      }\n      return false;\n    });\n    const uniquePlaces = removeDuplicatePlacesByName(filteredPlaces);\n    uniquePlaces.forEach(place => {\n      var _place$types2;\n      const matchedCategory = (_place$types2 = place.types) === null || _place$types2 === void 0 ? void 0 : _place$types2.map(t => categoryReverseLookup[t]).find(Boolean);\n      place.category = matchedCategory || 'other';\n    });\n    const markers = uniquePlaces.map((place, index) => {\n      const markerHTML = ReactDOMServer.renderToStaticMarkup(/*#__PURE__*/_jsxDEV(CustomerMarker, {\n        number: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this));\n      const wrapper = document.createElement('div');\n      wrapper.innerHTML = markerHTML;\n      return new AdvancedMarkerElement({\n        map,\n        position: place.location,\n        title: place.displayName,\n        content: wrapper.firstChild\n      });\n    });\n    return {\n      places: uniquePlaces,\n      markers\n    };\n  }\n}","map":{"version":3,"names":["ReactDOMServer","CustomerMarker","jsxDEV","_jsxDEV","normalizeName","name","toLowerCase","replace","trim","removeDuplicatePlacesByName","places","seen","Set","filter","place","norm","displayName","some","existing","includes","add","searchNearbyAmenities","map","clickedLocation","radius","includedPrimaryTypes","isMajorMode","Place","SearchNearbyRankPreference","google","maps","importLibrary","AdvancedMarkerElement","CATEGORY_TYPE_MAP","education","medical","grocery","transport","green","culture","categoryReverseLookup","category","types","Object","entries","type","request","locationRestriction","center","fields","maxResultCount","rankPreference","POPULARITY","language","searchNearby","filteredPlaces","_place$userRatingCoun","_place$rating","_place$types","_place$displayName$to","_place$displayName","businessStatus","userRatingCount","rating","t","test","uniquePlaces","forEach","_place$types2","matchedCategory","find","Boolean","markers","index","markerHTML","renderToStaticMarkup","number","fileName","_jsxFileName","lineNumber","columnNumber","wrapper","document","createElement","innerHTML","position","location","title","content","firstChild"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js"],"sourcesContent":["/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nfunction normalizeName(name) {\n  return name.toLowerCase()\n    .replace(/building\\s*\\d+/g, '')\n    .replace(/academic|campus|centre|center|college|institute|school|university/g, '')\n    .replace(/[^a-z0-9]/g, '')\n    .trim();\n}\n\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\n\nexport async function searchNearbyAmenities({ map, clickedLocation, radius, includedPrimaryTypes, isMajorMode = false }) {\n  const { Place, SearchNearbyRankPreference } = await google.maps.importLibrary('places');\n  const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');\n\n  const CATEGORY_TYPE_MAP = {\n    education: ['primary_school', 'secondary_school', 'university'],\n    medical: ['hospital'], // Only allow real hospitals\n    grocery: ['supermarket', 'grocery_store', 'department_store', 'shopping_mall'],\n    transport: ['train_station', 'subway_station', 'bus_station', 'transit_station', 'light_rail_station'],\n    green: ['park', 'state_park', 'campground', 'rv_park'],\n    culture: ['museum', 'library', 'art_gallery', 'stadium', 'concert_hall'],\n  };\n\n  const categoryReverseLookup = {};\n  for (const [category, types] of Object.entries(CATEGORY_TYPE_MAP)) {\n    for (const type of types) {\n      categoryReverseLookup[type] = category;\n    }\n  }\n\n  if (!isMajorMode) {\n    const request = {\n      locationRestriction: {\n        center: clickedLocation,\n        radius,\n      },\n      fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n      includedPrimaryTypes,\n      maxResultCount: 20,\n      rankPreference: SearchNearbyRankPreference.POPULARITY,\n      language: 'en-AU',\n    };\n\n    const { places = [] } = await Place.searchNearby(request);\n\n    // 필터 기준 적용:\n    const filteredPlaces = places.filter(place => {\n      if (place.businessStatus !== 'OPERATIONAL') return false;\n      if ((place.userRatingCount ?? 0) < 2) return false;\n      if ((place.rating ?? 0) < 3.8) return false;\n\n      // 카테고리별 필터 적용\n      const types = place.types ?? [];\n\n      // education: 법적으로 보호된 명칭들만\n      if (types.some(t => CATEGORY_TYPE_MAP.education.includes(t))) {\n        return true;\n      }\n\n      // medical: 'hospital'만 허용 (의원 제외)\n      if (types.includes('hospital')) {\n        return true;\n      }\n\n      // grocery: 이름에 coles, woolworths, aldi, asian, oriental, outlet 포함 + 타입 체크\n      const name = place.displayName?.toLowerCase() ?? '';\n      if (types.some(t => CATEGORY_TYPE_MAP.grocery.includes(t)) && /coles|woolworths|aldi|asian|oriental|outlet/.test(name)) {\n        return true;\n      }\n\n      // transport: 역은 모두 허용\n      if (types.some(t => CATEGORY_TYPE_MAP.transport.includes(t))) {\n        return true;\n      }\n\n      // green: 평점 & 리뷰 높은 공원만 허용\n      if (types.some(t => CATEGORY_TYPE_MAP.green.includes(t)) && place.userRatingCount >= 20) {\n        return true;\n      }\n\n      // culture: 평점 & 리뷰 기준 충족하는 박물관, 미술관 등만 허용\n      if (types.some(t => CATEGORY_TYPE_MAP.culture.includes(t)) && place.userRatingCount >= 30 && place.rating >= 4.0) {\n        return true;\n      }\n\n      return false;\n    });\n\n    const uniquePlaces = removeDuplicatePlacesByName(filteredPlaces);\n\n    uniquePlaces.forEach(place => {\n      const matchedCategory = place.types?.map(t => categoryReverseLookup[t]).find(Boolean);\n      place.category = matchedCategory || 'other';\n    });\n\n    const markers = uniquePlaces.map((place, index) => {\n      const markerHTML = ReactDOMServer.renderToStaticMarkup(\n        <CustomerMarker number={index + 1} />\n      );\n      const wrapper = document.createElement('div');\n      wrapper.innerHTML = markerHTML;\n      return new AdvancedMarkerElement({\n        map,\n        position: place.location,\n        title: place.displayName,\n        content: wrapper.firstChild,\n      });\n    });\n\n    return { places: uniquePlaces, markers };\n  }\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}