{"ast":null,"code":"import axios from 'axios';\n// src/utils/searchNearbyAmenities.js\n/**\n * Fetch nearby amenities via Overpass API using GET (no CORS preflight).\n * @param {{ lat:number, lng:number, radius:number, amenities:string[] }} opts\n */\nexport async function searchNearbyAmenities({\n  lat,\n  lng,\n  radius,\n  amenities\n}) {\n  // 1) Build Overpass QL filters\n  const filters = amenities.map(a => `node[\"amenity\"=\"${a}\"](around:${radius},${lat},${lng});`).join('\\n');\n\n  // 2) Wrap in Overpass query\n  const query = `\n    [out:json][timeout:25];\n    (\n      ${filters}\n    );\n    out body;\n  `;\n\n  // 3) URL-encode it\n  const url = 'https://overpass-api.de/api/interpreter?data=' + encodeURIComponent(query);\n\n  // 4) Fire a simple GET (no headers needed)\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw new Error(`Overpass API returned ${res.status}: ${res.statusText}`);\n  }\n  const json = await res.json();\n\n  // 5) Map into your place format\n  return json.elements.map(el => ({\n    id: el.id,\n    name: el.tags.name || 'Unnamed',\n    lat: el.lat,\n    lng: el.lon,\n    type: el.tags.amenity\n  }));\n}","map":{"version":3,"names":["axios","searchNearbyAmenities","lat","lng","radius","amenities","filters","map","a","join","query","url","encodeURIComponent","res","fetch","ok","Error","status","statusText","json","elements","el","id","name","tags","lon","type","amenity"],"sources":["/Users/jungsooyoung/Documents/software modelling/Real-Estate-AI/src/utils/searchNearbyAmenities.js"],"sourcesContent":["import axios from 'axios';\n// src/utils/searchNearbyAmenities.js\n/**\n * Fetch nearby amenities via Overpass API using GET (no CORS preflight).\n * @param {{ lat:number, lng:number, radius:number, amenities:string[] }} opts\n */\nexport async function searchNearbyAmenities({ lat, lng, radius, amenities }) {\n  // 1) Build Overpass QL filters\n  const filters = amenities\n    .map(a => `node[\"amenity\"=\"${a}\"](around:${radius},${lat},${lng});`)\n    .join('\\n');\n\n  // 2) Wrap in Overpass query\n  const query = `\n    [out:json][timeout:25];\n    (\n      ${filters}\n    );\n    out body;\n  `;\n\n  // 3) URL-encode it\n  const url = 'https://overpass-api.de/api/interpreter?data=' + encodeURIComponent(query);\n\n  // 4) Fire a simple GET (no headers needed)\n  const res = await fetch(url);\n  if (!res.ok) {\n    throw new Error(`Overpass API returned ${res.status}: ${res.statusText}`);\n  }\n  const json = await res.json();\n  \n  // 5) Map into your place format\n  return json.elements.map(el => ({\n    id: el.id,\n    name: el.tags.name || 'Unnamed',\n    lat: el.lat,\n    lng: el.lon,\n    type: el.tags.amenity,\n  }));\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,qBAAqBA,CAAC;EAAEC,GAAG;EAAEC,GAAG;EAAEC,MAAM;EAAEC;AAAU,CAAC,EAAE;EAC3E;EACA,MAAMC,OAAO,GAAGD,SAAS,CACtBE,GAAG,CAACC,CAAC,IAAI,mBAAmBA,CAAC,aAAaJ,MAAM,IAAIF,GAAG,IAAIC,GAAG,IAAI,CAAC,CACnEM,IAAI,CAAC,IAAI,CAAC;;EAEb;EACA,MAAMC,KAAK,GAAG;AAChB;AACA;AACA,QAAQJ,OAAO;AACf;AACA;AACA,GAAG;;EAED;EACA,MAAMK,GAAG,GAAG,+CAA+C,GAAGC,kBAAkB,CAACF,KAAK,CAAC;;EAEvF;EACA,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;EAC5B,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE;IACX,MAAM,IAAIC,KAAK,CAAC,yBAAyBH,GAAG,CAACI,MAAM,KAAKJ,GAAG,CAACK,UAAU,EAAE,CAAC;EAC3E;EACA,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAI,CAAC,CAAC;;EAE7B;EACA,OAAOA,IAAI,CAACC,QAAQ,CAACb,GAAG,CAACc,EAAE,KAAK;IAC9BC,EAAE,EAAED,EAAE,CAACC,EAAE;IACTC,IAAI,EAAEF,EAAE,CAACG,IAAI,CAACD,IAAI,IAAI,SAAS;IAC/BrB,GAAG,EAAEmB,EAAE,CAACnB,GAAG;IACXC,GAAG,EAAEkB,EAAE,CAACI,GAAG;IACXC,IAAI,EAAEL,EAAE,CAACG,IAAI,CAACG;EAChB,CAAC,CAAC,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}