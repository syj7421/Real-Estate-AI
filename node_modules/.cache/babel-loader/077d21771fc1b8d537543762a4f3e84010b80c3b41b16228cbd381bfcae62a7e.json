{"ast":null,"code":"var _jsxFileName = \"/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js\";\n/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport async function searchNearbyAmenities({\n  map,\n  clickedLocation,\n  radius,\n  includedPrimaryTypes,\n  isMajorMode = false\n}) {\n  const {\n    Place,\n    SearchNearbyRankPreference\n  } = await google.maps.importLibrary('places');\n  const {\n    AdvancedMarkerElement\n  } = await google.maps.importLibrary('marker');\n  const request = {\n    locationRestriction: {\n      center: clickedLocation,\n      radius\n    },\n    fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n    includedPrimaryTypes,\n    maxResultCount: 20,\n    rankPreference: SearchNearbyRankPreference.POPULARITY,\n    language: 'en-AU'\n  };\n  const {\n    places\n  } = await Place.searchNearby(request);\n  let finalPlaces = places;\n  if (isMajorMode) {\n    // Major Amenities 모드에서는 강력한 필터링 + 상위 3개만 추출\n    const filtered = places.filter(place => {\n      var _place$userRatingCoun, _place$rating;\n      return place.businessStatus === 'OPERATIONAL' && ((_place$userRatingCoun = place.userRatingCount) !== null && _place$userRatingCoun !== void 0 ? _place$userRatingCoun : 0) >= 30 && ((_place$rating = place.rating) !== null && _place$rating !== void 0 ? _place$rating : 0) >= 4.0 && /hospital|university|school|station|library|tram|train|coles|woolworths|aldi|park|gallery|museum|clinic/i.test(place.displayName);\n    });\n\n    // 평점 기준 상위 3개만 추출\n    const sorted = [...filtered].sort((a, b) => {\n      var _b$rating, _a$rating;\n      return ((_b$rating = b.rating) !== null && _b$rating !== void 0 ? _b$rating : 0) - ((_a$rating = a.rating) !== null && _a$rating !== void 0 ? _a$rating : 0);\n    });\n    finalPlaces = sorted.slice(0, 3);\n  } else {\n    // 일반 카테고리 모드에서는 기본 필터만 적용 (가벼운 필터링)\n    finalPlaces = places.filter(place => {\n      var _place$rating2;\n      return place.businessStatus === 'OPERATIONAL' && ((_place$rating2 = place.rating) !== null && _place$rating2 !== void 0 ? _place$rating2 : 0) >= 3.8;\n    });\n  }\n  const markers = [];\n  if (finalPlaces.length) {\n    finalPlaces.forEach((place, index) => {\n      const markerHTML = ReactDOMServer.renderToStaticMarkup(/*#__PURE__*/_jsxDEV(CustomerMarker, {\n        number: index + 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this));\n      const wrapper = document.createElement('div');\n      wrapper.innerHTML = markerHTML;\n      const marker = new AdvancedMarkerElement({\n        map,\n        position: place.location,\n        title: place.displayName,\n        content: wrapper.firstChild\n      });\n      markers.push(marker);\n    });\n  }\n  return {\n    places: finalPlaces,\n    markers\n  };\n}","map":{"version":3,"names":["ReactDOMServer","CustomerMarker","jsxDEV","_jsxDEV","searchNearbyAmenities","map","clickedLocation","radius","includedPrimaryTypes","isMajorMode","Place","SearchNearbyRankPreference","google","maps","importLibrary","AdvancedMarkerElement","request","locationRestriction","center","fields","maxResultCount","rankPreference","POPULARITY","language","places","searchNearby","finalPlaces","filtered","filter","place","_place$userRatingCoun","_place$rating","businessStatus","userRatingCount","rating","test","displayName","sorted","sort","a","b","_b$rating","_a$rating","slice","_place$rating2","markers","length","forEach","index","markerHTML","renderToStaticMarkup","number","fileName","_jsxFileName","lineNumber","columnNumber","wrapper","document","createElement","innerHTML","marker","position","location","title","content","firstChild","push"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js"],"sourcesContent":["/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\n\n\nexport async function searchNearbyAmenities({ map, clickedLocation, radius, includedPrimaryTypes, isMajorMode = false }) {\n  const { Place, SearchNearbyRankPreference } = await google.maps.importLibrary('places');\n  const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');\n\n  const request = {\n    locationRestriction: {\n      center: clickedLocation,\n      radius,\n    },\n    fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n    includedPrimaryTypes,\n    maxResultCount: 20,\n    rankPreference: SearchNearbyRankPreference.POPULARITY,\n    language: 'en-AU',\n  };\n\n  const { places } = await Place.searchNearby(request);\n\n  let finalPlaces = places;\n\n  if (isMajorMode) {\n    // Major Amenities 모드에서는 강력한 필터링 + 상위 3개만 추출\n    const filtered = places.filter(place =>\n      place.businessStatus === 'OPERATIONAL' &&\n      (place.userRatingCount ?? 0) >= 30 &&\n      (place.rating ?? 0) >= 4.0 &&\n      /hospital|university|school|station|library|tram|train|coles|woolworths|aldi|park|gallery|museum|clinic/i.test(place.displayName)\n    );\n\n    // 평점 기준 상위 3개만 추출\n    const sorted = [...filtered].sort((a, b) => (b.rating ?? 0) - (a.rating ?? 0));\n    finalPlaces = sorted.slice(0, 3);\n  } else {\n    // 일반 카테고리 모드에서는 기본 필터만 적용 (가벼운 필터링)\n    finalPlaces = places.filter(place =>\n      place.businessStatus === 'OPERATIONAL' &&\n      (place.rating ?? 0) >= 3.8\n    );\n  }\n\n  const markers = [];\n\n  if (finalPlaces.length) {\n    finalPlaces.forEach((place, index) => {\n      const markerHTML = ReactDOMServer.renderToStaticMarkup(\n        <CustomerMarker number={index + 1} />\n      );\n      const wrapper = document.createElement('div');\n      wrapper.innerHTML = markerHTML;\n      const marker = new AdvancedMarkerElement({\n        map,\n        position: place.location,\n        title: place.displayName,\n        content: wrapper.firstChild,\n      });\n      markers.push(marker);\n    });\n  }\n\n  return { places: finalPlaces, markers };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}