{"ast":null,"code":"var _s = $RefreshSig$();\nimport { Loader } from '@googlemaps/js-api-loader';\nimport { searchNearbyAmenities } from '../utils/searchNearbyAmenities';\nconst useGoogleMap = (mapRef, onLocationSelect, onPlacesUpdate, selectedLocation, activeCategories) => {\n  _s();\n  const mapInstance = useRef(null);\n  const selectedMarkerRef = useRef(null); // ✅ 클릭 위치 마커\n  const nearbyMarkersRef = useRef([]);\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: 'weekly'\n    });\n    loader.load().then(async () => {\n      const {\n        Map\n      } = await google.maps.importLibrary('maps');\n      const {\n        AdvancedMarkerElement\n      } = await google.maps.importLibrary('marker');\n      const melbourneCBD = {\n        lat: -37.8136,\n        lng: 144.9631\n      };\n      const map = new Map(mapRef.current, {\n        center: melbourneCBD,\n        zoom: 14,\n        mapId: 'feabc4fd011254f284cca2c8'\n      });\n      mapInstance.current = map;\n      map.addListener('click', async event => {\n        const clickedLocation = event.latLng;\n        onLocationSelect(clickedLocation);\n\n        // ✅ 클릭 위치 마커 표시\n        if (selectedMarkerRef.current) {\n          selectedMarkerRef.current.position = clickedLocation;\n        } else {\n          selectedMarkerRef.current = new AdvancedMarkerElement({\n            position: clickedLocation,\n            map\n          });\n        }\n      });\n    });\n  }, [mapRef, onLocationSelect]);\n  useEffect(() => {\n    if (!selectedLocation || !mapInstance.current) return;\n\n    // ❌ 주변 마커 초기화\n    nearbyMarkersRef.current.forEach(marker => marker.map = null);\n    nearbyMarkersRef.current = [];\n\n    // ✅ 타입 설정\n    const CATEGORY_TYPE_MAP = {\n      education: ['school', 'university'],\n      grocery: ['supermarket', 'grocery_store'],\n      transport: ['train_station', 'bus_station', 'transit_station', 'light_rail_station', 'subway_station'],\n      medical: ['hospital', 'pharmacy', 'doctor', 'dentist'],\n      green: ['park', 'state_park'],\n      culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'concert_hall', 'stadium'],\n      other: []\n    };\n    let includedTypes = [];\n    if (activeCategories.includes('all')) {\n      includedTypes = Object.values(CATEGORY_TYPE_MAP).flat();\n    } else {\n      includedTypes = activeCategories.flatMap(category => CATEGORY_TYPE_MAP[category] || []);\n    }\n    searchNearbyAmenities({\n      map: mapInstance.current,\n      clickedLocation: selectedLocation,\n      radius: 800,\n      includedPrimaryTypes: includedTypes\n    }).then(({\n      places,\n      markers\n    }) => {\n      nearbyMarkersRef.current = markers;\n      onPlacesUpdate(places);\n    });\n  }, [selectedLocation, activeCategories, onPlacesUpdate]);\n};\n_s(useGoogleMap, \"h4haL4aU4/AgJ1Nz2SHUDcQMg8g=\");\nexport default useGoogleMap;","map":{"version":3,"names":["Loader","searchNearbyAmenities","useGoogleMap","mapRef","onLocationSelect","onPlacesUpdate","selectedLocation","activeCategories","_s","mapInstance","useRef","selectedMarkerRef","nearbyMarkersRef","useEffect","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","load","then","Map","google","maps","importLibrary","AdvancedMarkerElement","melbourneCBD","lat","lng","map","current","center","zoom","mapId","addListener","event","clickedLocation","latLng","position","forEach","marker","CATEGORY_TYPE_MAP","education","grocery","transport","medical","green","culture","other","includedTypes","includes","Object","values","flat","flatMap","category","radius","includedPrimaryTypes","places","markers"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/hooks/useGoogleMap.js"],"sourcesContent":["import { Loader } from '@googlemaps/js-api-loader';\nimport { searchNearbyAmenities } from '../utils/searchNearbyAmenities';\n\nconst useGoogleMap = (\n  mapRef,\n  onLocationSelect,\n  onPlacesUpdate,\n  selectedLocation,\n  activeCategories\n) => {\n  const mapInstance = useRef(null);\n  const selectedMarkerRef = useRef(null); // ✅ 클릭 위치 마커\n  const nearbyMarkersRef = useRef([]);\n\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: 'weekly',\n    });\n\n    loader.load().then(async () => {\n      const { Map } = await google.maps.importLibrary('maps');\n      const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');\n\n      const melbourneCBD = { lat: -37.8136, lng: 144.9631 };\n      const map = new Map(mapRef.current, {\n        center: melbourneCBD,\n        zoom: 14,\n        mapId: 'feabc4fd011254f284cca2c8',\n      });\n\n      mapInstance.current = map;\n\n      map.addListener('click', async (event) => {\n        const clickedLocation = event.latLng;\n        onLocationSelect(clickedLocation);\n\n        // ✅ 클릭 위치 마커 표시\n        if (selectedMarkerRef.current) {\n          selectedMarkerRef.current.position = clickedLocation;\n        } else {\n          selectedMarkerRef.current = new AdvancedMarkerElement({\n            position: clickedLocation,\n            map,\n          });\n        }\n      });\n    });\n  }, [mapRef, onLocationSelect]);\n\n  useEffect(() => {\n    if (!selectedLocation || !mapInstance.current) return;\n\n    // ❌ 주변 마커 초기화\n    nearbyMarkersRef.current.forEach((marker) => marker.map = null);\n    nearbyMarkersRef.current = [];\n\n    // ✅ 타입 설정\n    const CATEGORY_TYPE_MAP = {\n      education: ['school', 'university'],\n      grocery: ['supermarket', 'grocery_store'],\n      transport: ['train_station', 'bus_station', 'transit_station', 'light_rail_station', 'subway_station'],\n      medical: ['hospital', 'pharmacy', 'doctor', 'dentist'],\n      green: ['park', 'state_park'],\n      culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'concert_hall', 'stadium'],\n      other: [],\n    };\n\n    let includedTypes = [];\n    if (activeCategories.includes('all')) {\n      includedTypes = Object.values(CATEGORY_TYPE_MAP).flat();\n    } else {\n      includedTypes = activeCategories.flatMap((category) => CATEGORY_TYPE_MAP[category] || []);\n    }\n\n    searchNearbyAmenities({\n      map: mapInstance.current,\n      clickedLocation: selectedLocation,\n      radius: 800,\n      includedPrimaryTypes: includedTypes,\n    }).then(({ places, markers }) => {\n      nearbyMarkersRef.current = markers;\n      onPlacesUpdate(places);\n    });\n  }, [selectedLocation, activeCategories, onPlacesUpdate]);\n};\n\nexport default useGoogleMap;\n"],"mappings":";AAAA,SAASA,MAAM,QAAQ,2BAA2B;AAClD,SAASC,qBAAqB,QAAQ,gCAAgC;AAEtE,MAAMC,YAAY,GAAGA,CACnBC,MAAM,EACNC,gBAAgB,EAChBC,cAAc,EACdC,gBAAgB,EAChBC,gBAAgB,KACb;EAAAC,EAAA;EACH,MAAMC,WAAW,GAAGC,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMC,iBAAiB,GAAGD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EACxC,MAAME,gBAAgB,GAAGF,MAAM,CAAC,EAAE,CAAC;EAEnCG,SAAS,CAAC,MAAM;IACd,MAAMC,MAAM,GAAG,IAAId,MAAM,CAAC;MACxBe,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,6BAA6B;MACjDC,OAAO,EAAE;IACX,CAAC,CAAC;IAEFL,MAAM,CAACM,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,YAAY;MAC7B,MAAM;QAAEC;MAAI,CAAC,GAAG,MAAMC,MAAM,CAACC,IAAI,CAACC,aAAa,CAAC,MAAM,CAAC;MACvD,MAAM;QAAEC;MAAsB,CAAC,GAAG,MAAMH,MAAM,CAACC,IAAI,CAACC,aAAa,CAAC,QAAQ,CAAC;MAE3E,MAAME,YAAY,GAAG;QAAEC,GAAG,EAAE,CAAC,OAAO;QAAEC,GAAG,EAAE;MAAS,CAAC;MACrD,MAAMC,GAAG,GAAG,IAAIR,GAAG,CAACnB,MAAM,CAAC4B,OAAO,EAAE;QAClCC,MAAM,EAAEL,YAAY;QACpBM,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE;MACT,CAAC,CAAC;MAEFzB,WAAW,CAACsB,OAAO,GAAGD,GAAG;MAEzBA,GAAG,CAACK,WAAW,CAAC,OAAO,EAAE,MAAOC,KAAK,IAAK;QACxC,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM;QACpClC,gBAAgB,CAACiC,eAAe,CAAC;;QAEjC;QACA,IAAI1B,iBAAiB,CAACoB,OAAO,EAAE;UAC7BpB,iBAAiB,CAACoB,OAAO,CAACQ,QAAQ,GAAGF,eAAe;QACtD,CAAC,MAAM;UACL1B,iBAAiB,CAACoB,OAAO,GAAG,IAAIL,qBAAqB,CAAC;YACpDa,QAAQ,EAAEF,eAAe;YACzBP;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC3B,MAAM,EAAEC,gBAAgB,CAAC,CAAC;EAE9BS,SAAS,CAAC,MAAM;IACd,IAAI,CAACP,gBAAgB,IAAI,CAACG,WAAW,CAACsB,OAAO,EAAE;;IAE/C;IACAnB,gBAAgB,CAACmB,OAAO,CAACS,OAAO,CAAEC,MAAM,IAAKA,MAAM,CAACX,GAAG,GAAG,IAAI,CAAC;IAC/DlB,gBAAgB,CAACmB,OAAO,GAAG,EAAE;;IAE7B;IACA,MAAMW,iBAAiB,GAAG;MACxBC,SAAS,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;MACnCC,OAAO,EAAE,CAAC,aAAa,EAAE,eAAe,CAAC;MACzCC,SAAS,EAAE,CAAC,eAAe,EAAE,aAAa,EAAE,iBAAiB,EAAE,oBAAoB,EAAE,gBAAgB,CAAC;MACtGC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC;MACtDC,KAAK,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC;MAC7BC,OAAO,EAAE,CAAC,QAAQ,EAAE,oBAAoB,EAAE,SAAS,EAAE,aAAa,EAAE,eAAe,EAAE,cAAc,EAAE,SAAS,CAAC;MAC/GC,KAAK,EAAE;IACT,CAAC;IAED,IAAIC,aAAa,GAAG,EAAE;IACtB,IAAI3C,gBAAgB,CAAC4C,QAAQ,CAAC,KAAK,CAAC,EAAE;MACpCD,aAAa,GAAGE,MAAM,CAACC,MAAM,CAACX,iBAAiB,CAAC,CAACY,IAAI,CAAC,CAAC;IACzD,CAAC,MAAM;MACLJ,aAAa,GAAG3C,gBAAgB,CAACgD,OAAO,CAAEC,QAAQ,IAAKd,iBAAiB,CAACc,QAAQ,CAAC,IAAI,EAAE,CAAC;IAC3F;IAEAvD,qBAAqB,CAAC;MACpB6B,GAAG,EAAErB,WAAW,CAACsB,OAAO;MACxBM,eAAe,EAAE/B,gBAAgB;MACjCmD,MAAM,EAAE,GAAG;MACXC,oBAAoB,EAAER;IACxB,CAAC,CAAC,CAAC7B,IAAI,CAAC,CAAC;MAAEsC,MAAM;MAAEC;IAAQ,CAAC,KAAK;MAC/BhD,gBAAgB,CAACmB,OAAO,GAAG6B,OAAO;MAClCvD,cAAc,CAACsD,MAAM,CAAC;IACxB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACrD,gBAAgB,EAAEC,gBAAgB,EAAEF,cAAc,CAAC,CAAC;AAC1D,CAAC;AAACG,EAAA,CAlFIN,YAAY;AAoFlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}