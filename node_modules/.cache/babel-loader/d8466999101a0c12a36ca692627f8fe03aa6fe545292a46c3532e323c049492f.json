{"ast":null,"code":"var _s = $RefreshSig$();\n/* global google */\nimport { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nimport ReactDOMServer from 'react-dom/server';\nconst CATEGORY_TYPE_MAP = {\n  education: ['school', 'university', 'college'],\n  grocery: ['supermarket', 'grocery_store'],\n  transport: ['train_station', 'bus_station', 'transit_station', 'light_rail_station', 'subway_station'],\n  medical: ['hospital', 'pharmacy', 'doctor', 'dentist', 'clinic'],\n  green: ['park', 'state_park', 'natural_feature'],\n  culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'theater', 'concert_hall', 'stadium'],\n  other: [] // 포함할지 여부는 판단 필요\n};\nconst useGoogleMap = (mapRef, onLocationSelect, onPlacesUpdate, selectedLocation, activeCategories) => {\n  _s();\n  const mapInstance = useRef(null);\n  const markerInstance = useRef(null);\n  const nearbyMarkersRef = useRef([]);\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: 'weekly'\n    });\n    loader.load().then(async () => {\n      const {\n        Map\n      } = await google.maps.importLibrary('maps');\n      const melbourneCBD = {\n        lat: -37.8136,\n        lng: 144.9631\n      };\n      const map = new Map(mapRef.current, {\n        center: melbourneCBD,\n        zoom: 14,\n        mapId: 'feabc4fd011254f284cca2c8'\n      });\n      mapInstance.current = map;\n      map.addListener('click', event => {\n        const clickedLocation = event.latLng;\n        onLocationSelect(clickedLocation);\n      });\n    });\n  }, [mapRef, onLocationSelect]);\n\n  // 👉 selectedLocation 또는 activeCategories 변경될 때 searchNearbyAmenities 호출\n  useEffect(() => {\n    if (!selectedLocation || !mapInstance.current) return;\n\n    // 1. 마커 초기화\n    nearbyMarkersRef.current.forEach(marker => marker.map = null);\n    nearbyMarkersRef.current = [];\n\n    // 2. 포함할 유형 계산\n    let includedTypes = [];\n    if (activeCategories.includes('all')) {\n      includedTypes = Object.values(CATEGORY_TYPE_MAP).flat();\n    } else {\n      includedTypes = activeCategories.flatMap(category => CATEGORY_TYPE_MAP[category] || []);\n    }\n\n    // 3. 검색 및 마커 표시\n    searchNearbyAmenities({\n      map: mapInstance.current,\n      clickedLocation: selectedLocation,\n      radius: 800,\n      includedPrimaryTypes: includedTypes\n    }).then(({\n      places,\n      markers\n    }) => {\n      nearbyMarkersRef.current = markers;\n      onPlacesUpdate(places);\n    });\n  }, [selectedLocation, activeCategories, onPlacesUpdate]);\n};\n_s(useGoogleMap, \"sv8jN1mxd/15Mgc69E524mU8mOM=\");\nexport default useGoogleMap;","map":{"version":3,"names":["useEffect","useRef","Loader","CustomerMarker","ReactDOMServer","CATEGORY_TYPE_MAP","education","grocery","transport","medical","green","culture","other","useGoogleMap","mapRef","onLocationSelect","onPlacesUpdate","selectedLocation","activeCategories","_s","mapInstance","markerInstance","nearbyMarkersRef","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","load","then","Map","google","maps","importLibrary","melbourneCBD","lat","lng","map","current","center","zoom","mapId","addListener","event","clickedLocation","latLng","forEach","marker","includedTypes","includes","Object","values","flat","flatMap","category","searchNearbyAmenities","radius","includedPrimaryTypes","places","markers"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/hooks/useGoogleMap.js"],"sourcesContent":["/* global google */\nimport { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nimport ReactDOMServer from 'react-dom/server';\n\n\nconst CATEGORY_TYPE_MAP = {\n  education: ['school', 'university', 'college'],\n  grocery: ['supermarket', 'grocery_store'],\n  transport: ['train_station', 'bus_station', 'transit_station', 'light_rail_station', 'subway_station'],\n  medical: ['hospital', 'pharmacy', 'doctor', 'dentist', 'clinic'],\n  green: ['park', 'state_park', 'natural_feature'],\n  culture: ['museum', 'tourist_attraction', 'library', 'art_gallery', 'movie_theater', 'theater', 'concert_hall', 'stadium'],\n  other: [] // 포함할지 여부는 판단 필요\n};\n\nconst useGoogleMap = (mapRef, onLocationSelect, onPlacesUpdate, selectedLocation, activeCategories) => {\n  const mapInstance = useRef(null);\n  const markerInstance = useRef(null);\n  const nearbyMarkersRef = useRef([]);\n\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: 'weekly',\n    });\n\n    loader.load().then(async () => {\n      const { Map } = await google.maps.importLibrary('maps');\n\n      const melbourneCBD = { lat: -37.8136, lng: 144.9631 };\n      const map = new Map(mapRef.current, {\n        center: melbourneCBD,\n        zoom: 14,\n        mapId: 'feabc4fd011254f284cca2c8',\n      });\n\n      mapInstance.current = map;\n\n      map.addListener('click', (event) => {\n        const clickedLocation = event.latLng;\n        onLocationSelect(clickedLocation);\n      });\n    });\n  }, [mapRef, onLocationSelect]);\n\n  // 👉 selectedLocation 또는 activeCategories 변경될 때 searchNearbyAmenities 호출\n  useEffect(() => {\n    if (!selectedLocation || !mapInstance.current) return;\n\n    // 1. 마커 초기화\n    nearbyMarkersRef.current.forEach((marker) => marker.map = null);\n    nearbyMarkersRef.current = [];\n\n    // 2. 포함할 유형 계산\n    let includedTypes = [];\n    if (activeCategories.includes('all')) {\n      includedTypes = Object.values(CATEGORY_TYPE_MAP).flat();\n    } else {\n      includedTypes = activeCategories.flatMap((category) => CATEGORY_TYPE_MAP[category] || []);\n    }\n\n    // 3. 검색 및 마커 표시\n    searchNearbyAmenities({\n      map: mapInstance.current,\n      clickedLocation: selectedLocation,\n      radius: 800,\n      includedPrimaryTypes: includedTypes,\n    }).then(({ places, markers }) => {\n      nearbyMarkersRef.current = markers;\n      onPlacesUpdate(places);\n    });\n  }, [selectedLocation, activeCategories, onPlacesUpdate]);\n};\n\nexport default useGoogleMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}