{"ast":null,"code":"var _jsxFileName = \"/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js\";\n/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction normalizeName(name) {\n  return name.toLowerCase().replace(/building\\s*\\d+/g, '') // 예: 'Building 9'\n  .replace(/academic|campus|centre|center|college|institute|school|university/g, '') // 불필요 단어 제거\n  .replace(/[^a-z0-9]/g, '') // 특수문자 제거\n  .trim();\n}\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\nexport async function searchNearbyAmenities({\n  map,\n  clickedLocation,\n  radius,\n  includedPrimaryTypes,\n  isMajorMode = false\n}) {\n  const {\n    Place,\n    SearchNearbyRankPreference\n  } = await google.maps.importLibrary('places');\n  const {\n    AdvancedMarkerElement\n  } = await google.maps.importLibrary('marker');\n  const request = {\n    locationRestriction: {\n      center: clickedLocation,\n      radius\n    },\n    fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n    includedPrimaryTypes,\n    maxResultCount: 20,\n    rankPreference: SearchNearbyRankPreference.POPULARITY,\n    language: 'en-AU'\n  };\n  const {\n    places = []\n  } = await Place.searchNearby(request);\n  let finalPlaces = [];\n  if (isMajorMode) {\n    const filtered = places.filter(place => {\n      var _place$userRatingCoun, _place$rating;\n      return place.businessStatus === 'OPERATIONAL' && ((_place$userRatingCoun = place.userRatingCount) !== null && _place$userRatingCoun !== void 0 ? _place$userRatingCoun : 0) >= 30 && ((_place$rating = place.rating) !== null && _place$rating !== void 0 ? _place$rating : 0) >= 4.0 && /hospital|university|school|station|library|tram|train|coles|woolworths|aldi|park|gallery|museum|clinic/i.test(place.displayName);\n    });\n    const sorted = filtered.sort((a, b) => {\n      var _b$rating, _a$rating;\n      return ((_b$rating = b.rating) !== null && _b$rating !== void 0 ? _b$rating : 0) - ((_a$rating = a.rating) !== null && _a$rating !== void 0 ? _a$rating : 0);\n    });\n    finalPlaces = sorted.slice(0, 3);\n  } else {\n    finalPlaces = places.filter(place => place.businessStatus === 'OPERATIONAL');\n  }\n\n  // ✅ 중복 제거\n  finalPlaces = removeDuplicatePlacesByName(finalPlaces);\n\n  // ✅ 마커 생성\n  const markers = [];\n  finalPlaces.forEach((place, index) => {\n    const markerHTML = ReactDOMServer.renderToStaticMarkup(/*#__PURE__*/_jsxDEV(CustomerMarker, {\n      number: index + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this));\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = markerHTML;\n    const marker = new AdvancedMarkerElement({\n      map,\n      position: place.location,\n      title: place.displayName,\n      content: wrapper.firstChild\n    });\n    markers.push(marker);\n  });\n  return {\n    places: finalPlaces,\n    markers\n  };\n}","map":{"version":3,"names":["ReactDOMServer","CustomerMarker","jsxDEV","_jsxDEV","normalizeName","name","toLowerCase","replace","trim","removeDuplicatePlacesByName","places","seen","Set","filter","place","norm","displayName","some","existing","includes","add","searchNearbyAmenities","map","clickedLocation","radius","includedPrimaryTypes","isMajorMode","Place","SearchNearbyRankPreference","google","maps","importLibrary","AdvancedMarkerElement","request","locationRestriction","center","fields","maxResultCount","rankPreference","POPULARITY","language","searchNearby","finalPlaces","filtered","_place$userRatingCoun","_place$rating","businessStatus","userRatingCount","rating","test","sorted","sort","a","b","_b$rating","_a$rating","slice","markers","forEach","index","markerHTML","renderToStaticMarkup","number","fileName","_jsxFileName","lineNumber","columnNumber","wrapper","document","createElement","innerHTML","marker","position","location","title","content","firstChild","push"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js"],"sourcesContent":["/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\n\nfunction normalizeName(name) {\n  return name.toLowerCase()\n    .replace(/building\\s*\\d+/g, '') // 예: 'Building 9'\n    .replace(/academic|campus|centre|center|college|institute|school|university/g, '') // 불필요 단어 제거\n    .replace(/[^a-z0-9]/g, '') // 특수문자 제거\n    .trim();\n}\n\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\n\nexport async function searchNearbyAmenities({ map, clickedLocation, radius, includedPrimaryTypes, isMajorMode = false }) {\n  const { Place, SearchNearbyRankPreference } = await google.maps.importLibrary('places');\n  const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');\n\n  const request = {\n    locationRestriction: {\n      center: clickedLocation,\n      radius,\n    },\n    fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n    includedPrimaryTypes,\n    maxResultCount: 20,\n    rankPreference: SearchNearbyRankPreference.POPULARITY,\n    language: 'en-AU',\n  };\n\n  const { places = [] } = await Place.searchNearby(request);\n\n  let finalPlaces = [];\n\n  if (isMajorMode) {\n    const filtered = places.filter(place =>\n      place.businessStatus === 'OPERATIONAL' &&\n      (place.userRatingCount ?? 0) >= 30 &&\n      (place.rating ?? 0) >= 4.0 &&\n      /hospital|university|school|station|library|tram|train|coles|woolworths|aldi|park|gallery|museum|clinic/i.test(place.displayName)\n    );\n    const sorted = filtered.sort((a, b) => (b.rating ?? 0) - (a.rating ?? 0));\n    finalPlaces = sorted.slice(0, 3);\n  } else {\n    finalPlaces = places.filter(place =>\n      place.businessStatus === 'OPERATIONAL'\n    );\n  }\n\n  // ✅ 중복 제거\n  finalPlaces = removeDuplicatePlacesByName(finalPlaces);\n\n  // ✅ 마커 생성\n  const markers = [];\n\n  finalPlaces.forEach((place, index) => {\n    const markerHTML = ReactDOMServer.renderToStaticMarkup(\n      <CustomerMarker number={index + 1} />\n    );\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = markerHTML;\n    const marker = new AdvancedMarkerElement({\n      map,\n      position: place.location,\n      title: place.displayName,\n      content: wrapper.firstChild,\n    });\n    markers.push(marker);\n  });\n\n  return { places: finalPlaces, markers };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}