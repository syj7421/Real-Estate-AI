{"ast":null,"code":"var _s = $RefreshSig$();\n/* global google */\nimport { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nconst useGoogleMap = mapRef => {\n  _s();\n  const mapInstance = useRef(null);\n  const markerInstance = useRef(null);\n  const nearbyMarkersRef = useRef([]); // 이전 마커들을 저장해서 지우기 위해\n\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: 'weekly',\n      libraries: ['marker', 'places']\n    });\n    loader.load().then(async () => {\n      const {\n        Map\n      } = await window.google.maps;\n      const {\n        AdvancedMarkerElement\n      } = await google.maps.importLibrary('marker');\n      const {\n        Place\n      } = await google.maps.importLibrary('places');\n      const melbourneCBD = {\n        lat: -37.8136,\n        lng: 144.9631\n      };\n      const map = new Map(mapRef.current, {\n        center: melbourneCBD,\n        zoom: 14,\n        mapId: 'feabc4fd011254f284cca2c8'\n      });\n      mapInstance.current = map;\n      map.addListener('click', async event => {\n        // 마커 위치 이동 또는 생성\n        if (markerInstance.current) {\n          markerInstance.current.position = {\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          };\n        } else {\n          const newMarker = new AdvancedMarkerElement({\n            position: event.latLng,\n            map\n          });\n          markerInstance.current = newMarker;\n        }\n        console.log(\"marker pos:\", markerInstance.current.position.lat, markerInstance.current.position.lng);\n\n        // 🔽 기존 nearby 마커 삭제\n        nearbyMarkersRef.current.forEach(m => m.map = null);\n        nearbyMarkersRef.current = [];\n\n        // ✅ 여기가 핵심! 클릭된 위치 주변 장소 검색\n        const placeService = new Place();\n        try {\n          const {\n            places\n          } = await placeService.searchNearby({\n            locationRestriction: {\n              center: {\n                lat: event.latLng.lat(),\n                lng: event.latLng.lng()\n              },\n              radius: 800 // 도보 10분\n            },\n            includedPrimaryTypes: ['restaurant', 'cafe'],\n            fields: ['displayName', 'location'],\n            maxResultCount: 10,\n            language: 'en',\n            region: 'au'\n          });\n          if (places.length) {\n            const bounds = new google.maps.LatLngBounds();\n            places.forEach(place => {\n              const nearbyMarker = new AdvancedMarkerElement({\n                map,\n                position: place.location,\n                title: place.displayName\n              });\n              nearbyMarkersRef.current.push(nearbyMarker);\n              bounds.extend(place.location);\n            });\n            map.fitBounds(bounds);\n          } else {\n            console.log('No nearby places found.');\n          }\n        } catch (error) {\n          console.error('Error during place search:', error);\n        }\n      });\n    });\n  }, [mapRef]);\n};\n_s(useGoogleMap, \"WtYCwMYtvr0vBRjkZwuDREBJKRY=\");\nexport default useGoogleMap;","map":{"version":3,"names":["useEffect","useRef","Loader","useGoogleMap","mapRef","_s","mapInstance","markerInstance","nearbyMarkersRef","loader","apiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","version","libraries","load","then","Map","window","google","maps","AdvancedMarkerElement","importLibrary","Place","melbourneCBD","lat","lng","map","current","center","zoom","mapId","addListener","event","position","latLng","newMarker","console","log","forEach","m","placeService","places","searchNearby","locationRestriction","radius","includedPrimaryTypes","fields","maxResultCount","language","region","length","bounds","LatLngBounds","place","nearbyMarker","location","title","displayName","push","extend","fitBounds","error"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/hooks/useGoogleMap.js"],"sourcesContent":["/* global google */\nimport { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\n\nconst useGoogleMap = (mapRef) => {\n  const mapInstance = useRef(null);\n  const markerInstance = useRef(null);\n  const nearbyMarkersRef = useRef([]); // 이전 마커들을 저장해서 지우기 위해\n\n  useEffect(() => {\n    const loader = new Loader({\n      apiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n      version: 'weekly',\n      libraries: ['marker', 'places'],\n    });\n\n    loader.load().then(async () => {\n      const { Map } = await window.google.maps;\n      const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');\n      const { Place } = await google.maps.importLibrary('places');\n\n      const melbourneCBD = { lat: -37.8136, lng: 144.9631 };\n\n      const map = new Map(mapRef.current, {\n        center: melbourneCBD,\n        zoom: 14,\n        mapId: 'feabc4fd011254f284cca2c8',\n      });\n\n      mapInstance.current = map;\n\n      map.addListener('click', async (event) => {\n        // 마커 위치 이동 또는 생성\n        if (markerInstance.current) {\n          markerInstance.current.position = {\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          };\n        } else {\n          const newMarker = new AdvancedMarkerElement({\n            position: event.latLng,\n            map,\n          });\n          markerInstance.current = newMarker;\n        }\n\n        console.log(\"marker pos:\", markerInstance.current.position.lat, markerInstance.current.position.lng);\n\n        // 🔽 기존 nearby 마커 삭제\n        nearbyMarkersRef.current.forEach((m) => m.map = null);\n        nearbyMarkersRef.current = [];\n\n        // ✅ 여기가 핵심! 클릭된 위치 주변 장소 검색\n        const placeService = new Place();\n\n        try {\n          const { places } = await placeService.searchNearby({\n            locationRestriction: {\n              center: {\n                lat: event.latLng.lat(),\n                lng: event.latLng.lng(),\n              },\n              radius: 800, // 도보 10분\n            },\n            includedPrimaryTypes: ['restaurant', 'cafe'],\n            fields: ['displayName', 'location'],\n            maxResultCount: 10,\n            language: 'en',\n            region: 'au',\n          });\n\n          if (places.length) {\n            const bounds = new google.maps.LatLngBounds();\n\n            places.forEach((place) => {\n              const nearbyMarker = new AdvancedMarkerElement({\n                map,\n                position: place.location,\n                title: place.displayName,\n              });\n\n              nearbyMarkersRef.current.push(nearbyMarker);\n              bounds.extend(place.location);\n            });\n\n            map.fitBounds(bounds);\n          } else {\n            console.log('No nearby places found.');\n          }\n        } catch (error) {\n          console.error('Error during place search:', error);\n        }\n      });\n    });\n  }, [mapRef]);\n};\n\nexport default useGoogleMap;\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACzC,SAASC,MAAM,QAAQ,2BAA2B;AAElD,MAAMC,YAAY,GAAIC,MAAM,IAAK;EAAAC,EAAA;EAC/B,MAAMC,WAAW,GAAGL,MAAM,CAAC,IAAI,CAAC;EAChC,MAAMM,cAAc,GAAGN,MAAM,CAAC,IAAI,CAAC;EACnC,MAAMO,gBAAgB,GAAGP,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;;EAErCD,SAAS,CAAC,MAAM;IACd,MAAMS,MAAM,GAAG,IAAIP,MAAM,CAAC;MACxBQ,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,6BAA6B;MACjDC,OAAO,EAAE,QAAQ;MACjBC,SAAS,EAAE,CAAC,QAAQ,EAAE,QAAQ;IAChC,CAAC,CAAC;IAEFN,MAAM,CAACO,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,YAAY;MAC7B,MAAM;QAAEC;MAAI,CAAC,GAAG,MAAMC,MAAM,CAACC,MAAM,CAACC,IAAI;MACxC,MAAM;QAAEC;MAAsB,CAAC,GAAG,MAAMF,MAAM,CAACC,IAAI,CAACE,aAAa,CAAC,QAAQ,CAAC;MAC3E,MAAM;QAAEC;MAAM,CAAC,GAAG,MAAMJ,MAAM,CAACC,IAAI,CAACE,aAAa,CAAC,QAAQ,CAAC;MAE3D,MAAME,YAAY,GAAG;QAAEC,GAAG,EAAE,CAAC,OAAO;QAAEC,GAAG,EAAE;MAAS,CAAC;MAErD,MAAMC,GAAG,GAAG,IAAIV,GAAG,CAACd,MAAM,CAACyB,OAAO,EAAE;QAClCC,MAAM,EAAEL,YAAY;QACpBM,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE;MACT,CAAC,CAAC;MAEF1B,WAAW,CAACuB,OAAO,GAAGD,GAAG;MAEzBA,GAAG,CAACK,WAAW,CAAC,OAAO,EAAE,MAAOC,KAAK,IAAK;QACxC;QACA,IAAI3B,cAAc,CAACsB,OAAO,EAAE;UAC1BtB,cAAc,CAACsB,OAAO,CAACM,QAAQ,GAAG;YAChCT,GAAG,EAAEQ,KAAK,CAACE,MAAM,CAACV,GAAG,CAAC,CAAC;YACvBC,GAAG,EAAEO,KAAK,CAACE,MAAM,CAACT,GAAG,CAAC;UACxB,CAAC;QACH,CAAC,MAAM;UACL,MAAMU,SAAS,GAAG,IAAIf,qBAAqB,CAAC;YAC1Ca,QAAQ,EAAED,KAAK,CAACE,MAAM;YACtBR;UACF,CAAC,CAAC;UACFrB,cAAc,CAACsB,OAAO,GAAGQ,SAAS;QACpC;QAEAC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEhC,cAAc,CAACsB,OAAO,CAACM,QAAQ,CAACT,GAAG,EAAEnB,cAAc,CAACsB,OAAO,CAACM,QAAQ,CAACR,GAAG,CAAC;;QAEpG;QACAnB,gBAAgB,CAACqB,OAAO,CAACW,OAAO,CAAEC,CAAC,IAAKA,CAAC,CAACb,GAAG,GAAG,IAAI,CAAC;QACrDpB,gBAAgB,CAACqB,OAAO,GAAG,EAAE;;QAE7B;QACA,MAAMa,YAAY,GAAG,IAAIlB,KAAK,CAAC,CAAC;QAEhC,IAAI;UACF,MAAM;YAAEmB;UAAO,CAAC,GAAG,MAAMD,YAAY,CAACE,YAAY,CAAC;YACjDC,mBAAmB,EAAE;cACnBf,MAAM,EAAE;gBACNJ,GAAG,EAAEQ,KAAK,CAACE,MAAM,CAACV,GAAG,CAAC,CAAC;gBACvBC,GAAG,EAAEO,KAAK,CAACE,MAAM,CAACT,GAAG,CAAC;cACxB,CAAC;cACDmB,MAAM,EAAE,GAAG,CAAE;YACf,CAAC;YACDC,oBAAoB,EAAE,CAAC,YAAY,EAAE,MAAM,CAAC;YAC5CC,MAAM,EAAE,CAAC,aAAa,EAAE,UAAU,CAAC;YACnCC,cAAc,EAAE,EAAE;YAClBC,QAAQ,EAAE,IAAI;YACdC,MAAM,EAAE;UACV,CAAC,CAAC;UAEF,IAAIR,MAAM,CAACS,MAAM,EAAE;YACjB,MAAMC,MAAM,GAAG,IAAIjC,MAAM,CAACC,IAAI,CAACiC,YAAY,CAAC,CAAC;YAE7CX,MAAM,CAACH,OAAO,CAAEe,KAAK,IAAK;cACxB,MAAMC,YAAY,GAAG,IAAIlC,qBAAqB,CAAC;gBAC7CM,GAAG;gBACHO,QAAQ,EAAEoB,KAAK,CAACE,QAAQ;gBACxBC,KAAK,EAAEH,KAAK,CAACI;cACf,CAAC,CAAC;cAEFnD,gBAAgB,CAACqB,OAAO,CAAC+B,IAAI,CAACJ,YAAY,CAAC;cAC3CH,MAAM,CAACQ,MAAM,CAACN,KAAK,CAACE,QAAQ,CAAC;YAC/B,CAAC,CAAC;YAEF7B,GAAG,CAACkC,SAAS,CAACT,MAAM,CAAC;UACvB,CAAC,MAAM;YACLf,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;UACxC;QACF,CAAC,CAAC,OAAOwB,KAAK,EAAE;UACdzB,OAAO,CAACyB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QACpD;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC3D,MAAM,CAAC,CAAC;AACd,CAAC;AAACC,EAAA,CA3FIF,YAAY;AA6FlB,eAAeA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}