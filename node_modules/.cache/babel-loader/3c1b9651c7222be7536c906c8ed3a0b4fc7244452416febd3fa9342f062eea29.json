{"ast":null,"code":"var _jsxFileName = \"/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/components/Header/Header.jsx\";\nimport React, { useState } from \"react\";\nimport CategoryFilter from \"./CategoryFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TYPE_CATEGORY_MAP = {\n  // 교육\n  school: 'education',\n  university: 'education',\n  college: 'education',\n  // 식료품/생필품\n  supermarket: 'grocery',\n  grocery_store: 'grocery',\n  // 교통\n  train_station: 'transport',\n  bus_station: 'transport',\n  transit_station: 'transport',\n  light_rail_station: 'transport',\n  subway_station: 'transport',\n  // 의료\n  hospital: 'medical',\n  pharmacy: 'medical',\n  doctor: 'medical',\n  dentist: 'medical',\n  clinic: 'medical',\n  // 공원/녹지\n  park: 'green',\n  state_park: 'green',\n  natural_feature: 'green',\n  // 문화시설\n  museum: 'culture',\n  tourist_attraction: 'culture',\n  library: 'culture',\n  art_gallery: 'culture',\n  movie_theater: 'culture',\n  theater: 'culture',\n  concert_hall: 'culture',\n  stadium: 'culture'\n};\nfunction getCategoryFromTypes(types) {\n  if (!types || types.length === 0) return 'other';\n  for (const type of types) {\n    const category = TYPE_CATEGORY_MAP[type];\n    if (category) return category; // 가장 먼저 매칭되는 카테고리 반환\n  }\n  return 'other'; // 매칭 실패 시\n}\n\n// 위에서 만든 getCategoryFromTypes 함수와 TYPE_CATEGORY_MAP 포함\nfunction Header({\n  selectedLocation,\n  places,\n  activeCategories,\n  onCategoryChange\n}) {\n  var _selectedLocation$toJ;\n  const coords = selectedLocation === null || selectedLocation === void 0 ? void 0 : (_selectedLocation$toJ = selectedLocation.toJSON) === null || _selectedLocation$toJ === void 0 ? void 0 : _selectedLocation$toJ.call(selectedLocation);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"absolute top-0 left-0 w-full z-20 bg-white p-4 shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: coords ? `Selected location: (${coords.lat.toFixed(5)}, ${coords.lng.toFixed(5)})` : 'Click on the map to select a location.'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), places.length > 0 && /*#__PURE__*/_jsxDEV(CategoryFilter, {\n      onChange: onCategoryChange,\n      activeCategories: activeCategories\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }, this);\n}\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","useState","CategoryFilter","jsxDEV","_jsxDEV","TYPE_CATEGORY_MAP","school","university","college","supermarket","grocery_store","train_station","bus_station","transit_station","light_rail_station","subway_station","hospital","pharmacy","doctor","dentist","clinic","park","state_park","natural_feature","museum","tourist_attraction","library","art_gallery","movie_theater","theater","concert_hall","stadium","getCategoryFromTypes","types","length","type","category","Header","selectedLocation","places","activeCategories","onCategoryChange","_selectedLocation$toJ","coords","toJSON","call","className","children","lat","toFixed","lng","fileName","_jsxFileName","lineNumber","columnNumber","onChange","_c","$RefreshReg$"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/components/Header/Header.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport CategoryFilter from \"./CategoryFilter\";\n\nconst TYPE_CATEGORY_MAP = {\n    // 교육\n    school: 'education',\n    university: 'education',\n    college: 'education',\n  \n    // 식료품/생필품\n    supermarket: 'grocery',\n    grocery_store: 'grocery',\n  \n    // 교통\n    train_station: 'transport',\n    bus_station: 'transport',\n    transit_station: 'transport',\n    light_rail_station: 'transport',\n    subway_station: 'transport',\n  \n    // 의료\n    hospital: 'medical',\n    pharmacy: 'medical',\n    doctor: 'medical',\n    dentist: 'medical',\n    clinic: 'medical',\n  \n    // 공원/녹지\n    park: 'green',\n    state_park: 'green',\n    natural_feature: 'green',\n  \n  \n    // 문화시설\n    museum: 'culture',\n    tourist_attraction: 'culture',\n    library: 'culture',\n    art_gallery: 'culture',\n    movie_theater: 'culture',\n    theater: 'culture',\n    concert_hall: 'culture',\n    stadium: 'culture',\n\n  };\n  \nfunction getCategoryFromTypes(types) {\n    if (!types || types.length === 0) return 'other';\n\n    for (const type of types) {\n        const category = TYPE_CATEGORY_MAP[type];\n        if (category) return category; // 가장 먼저 매칭되는 카테고리 반환\n    }\n\n    return 'other'; // 매칭 실패 시\n}\n\n\n// 위에서 만든 getCategoryFromTypes 함수와 TYPE_CATEGORY_MAP 포함\nfunction Header({ selectedLocation, places, activeCategories, onCategoryChange }) {\n    const coords = selectedLocation?.toJSON?.();\n  \n    return (\n      <div className=\"absolute top-0 left-0 w-full z-20 bg-white p-4 shadow-md\">\n        <div>\n          {coords\n            ? `Selected location: (${coords.lat.toFixed(5)}, ${coords.lng.toFixed(5)})`\n            : 'Click on the map to select a location.'\n          }\n        </div>\n  \n        {places.length > 0 && (\n          <CategoryFilter onChange={onCategoryChange} activeCategories={activeCategories} />\n        )}\n      </div>\n    );\n  }\n  \n\nexport default Header;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,iBAAiB,GAAG;EACtB;EACAC,MAAM,EAAE,WAAW;EACnBC,UAAU,EAAE,WAAW;EACvBC,OAAO,EAAE,WAAW;EAEpB;EACAC,WAAW,EAAE,SAAS;EACtBC,aAAa,EAAE,SAAS;EAExB;EACAC,aAAa,EAAE,WAAW;EAC1BC,WAAW,EAAE,WAAW;EACxBC,eAAe,EAAE,WAAW;EAC5BC,kBAAkB,EAAE,WAAW;EAC/BC,cAAc,EAAE,WAAW;EAE3B;EACAC,QAAQ,EAAE,SAAS;EACnBC,QAAQ,EAAE,SAAS;EACnBC,MAAM,EAAE,SAAS;EACjBC,OAAO,EAAE,SAAS;EAClBC,MAAM,EAAE,SAAS;EAEjB;EACAC,IAAI,EAAE,OAAO;EACbC,UAAU,EAAE,OAAO;EACnBC,eAAe,EAAE,OAAO;EAGxB;EACAC,MAAM,EAAE,SAAS;EACjBC,kBAAkB,EAAE,SAAS;EAC7BC,OAAO,EAAE,SAAS;EAClBC,WAAW,EAAE,SAAS;EACtBC,aAAa,EAAE,SAAS;EACxBC,OAAO,EAAE,SAAS;EAClBC,YAAY,EAAE,SAAS;EACvBC,OAAO,EAAE;AAEX,CAAC;AAEH,SAASC,oBAAoBA,CAACC,KAAK,EAAE;EACjC,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,OAAO;EAEhD,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACtB,MAAMG,QAAQ,GAAG/B,iBAAiB,CAAC8B,IAAI,CAAC;IACxC,IAAIC,QAAQ,EAAE,OAAOA,QAAQ,CAAC,CAAC;EACnC;EAEA,OAAO,OAAO,CAAC,CAAC;AACpB;;AAGA;AACA,SAASC,MAAMA,CAAC;EAAEC,gBAAgB;EAAEC,MAAM;EAAEC,gBAAgB;EAAEC;AAAiB,CAAC,EAAE;EAAA,IAAAC,qBAAA;EAC9E,MAAMC,MAAM,GAAGL,gBAAgB,aAAhBA,gBAAgB,wBAAAI,qBAAA,GAAhBJ,gBAAgB,CAAEM,MAAM,cAAAF,qBAAA,uBAAxBA,qBAAA,CAAAG,IAAA,CAAAP,gBAA2B,CAAC;EAE3C,oBACElC,OAAA;IAAK0C,SAAS,EAAC,0DAA0D;IAAAC,QAAA,gBACvE3C,OAAA;MAAA2C,QAAA,EACGJ,MAAM,GACH,uBAAuBA,MAAM,CAACK,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC,KAAKN,MAAM,CAACO,GAAG,CAACD,OAAO,CAAC,CAAC,CAAC,GAAG,GACzE;IAAwC;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEzC,CAAC,EAELf,MAAM,CAACL,MAAM,GAAG,CAAC,iBAChB9B,OAAA,CAACF,cAAc;MAACqD,QAAQ,EAAEd,gBAAiB;MAACD,gBAAgB,EAAEA;IAAiB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAClF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACE,EAAA,GAjBMnB,MAAM;AAoBf,eAAeA,MAAM;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}