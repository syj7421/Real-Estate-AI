{"ast":null,"code":"var _jsxFileName = \"/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js\";\n/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction normalizeName(name) {\n  return name.toLowerCase().replace(/building\\s*\\d+/g, '').replace(/academic|campus|centre|center|college|institute|school|university/g, '').replace(/[^a-z0-9]/g, '').trim();\n}\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\nexport async function searchNearbyAmenities({\n  map,\n  clickedLocation,\n  radius,\n  includedPrimaryTypes\n}) {\n  var _transportResponse$pl, _otherResponse$places;\n  const {\n    Place,\n    SearchNearbyRankPreference\n  } = await google.maps.importLibrary('places');\n  const {\n    AdvancedMarkerElement\n  } = await google.maps.importLibrary('marker');\n  const CATEGORY_TYPE_MAP = {\n    education: ['primary_school', 'secondary_school', 'university'],\n    medical: ['hospital', 'doctor', 'clinic'],\n    grocery: ['supermarket', 'grocery_store', 'department_store', 'shopping_mall', 'asian_grocery'],\n    transport: ['train_station', 'subway_station', 'bus_station', 'transit_station', 'light_rail_station'],\n    green: ['park', 'state_park', 'campground', 'rv_park'],\n    culture: ['museum', 'library', 'art_gallery', 'stadium', 'concert_hall']\n  };\n  const categoryReverseLookup = {};\n  for (const [category, types] of Object.entries(CATEGORY_TYPE_MAP)) {\n    for (const type of types) {\n      categoryReverseLookup[type] = category;\n    }\n  }\n  const allTypes = includedPrimaryTypes !== null && includedPrimaryTypes !== void 0 ? includedPrimaryTypes : [];\n  const transportTypes = allTypes.filter(t => CATEGORY_TYPE_MAP.transport.includes(t));\n  const otherTypes = allTypes.filter(t => !CATEGORY_TYPE_MAP.transport.includes(t));\n  const transportRequest = {\n    locationRestriction: {\n      center: clickedLocation,\n      radius\n    },\n    fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n    includedPrimaryTypes: transportTypes,\n    maxResultCount: 20,\n    rankPreference: SearchNearbyRankPreference.DISTANCE,\n    language: 'en-AU'\n  };\n  const otherRequest = {\n    locationRestriction: {\n      center: clickedLocation,\n      radius\n    },\n    fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n    includedPrimaryTypes: otherTypes,\n    maxResultCount: 20,\n    rankPreference: SearchNearbyRankPreference.POPULARITY,\n    language: 'en-AU'\n  };\n  const [transportResponse, otherResponse] = await Promise.all([Place.searchNearby(transportRequest), Place.searchNearby(otherRequest)]);\n  const places = [...((_transportResponse$pl = transportResponse.places) !== null && _transportResponse$pl !== void 0 ? _transportResponse$pl : []), ...((_otherResponse$places = otherResponse.places) !== null && _otherResponse$places !== void 0 ? _otherResponse$places : [])];\n  const filteredPlaces = places.filter(place => {\n    var _place$userRatingCoun, _place$rating, _place$types, _place$displayName$to, _place$displayName, _place$userRatingCoun2;\n    if (place.businessStatus !== 'OPERATIONAL') return false;\n    if (((_place$userRatingCoun = place.userRatingCount) !== null && _place$userRatingCoun !== void 0 ? _place$userRatingCoun : 0) < 2) return false;\n    if (((_place$rating = place.rating) !== null && _place$rating !== void 0 ? _place$rating : 0) < 3.8) return false;\n    const types = (_place$types = place.types) !== null && _place$types !== void 0 ? _place$types : [];\n    const name = (_place$displayName$to = (_place$displayName = place.displayName) === null || _place$displayName === void 0 ? void 0 : _place$displayName.toLowerCase()) !== null && _place$displayName$to !== void 0 ? _place$displayName$to : '';\n    if (types.some(t => CATEGORY_TYPE_MAP.education.includes(t))) return true;\n    if (types.includes('hospital') && name.includes('hospital') || types.includes('clinic') && /specialist|surgery|medical|health/.test(name)) {\n      return true;\n    }\n    if (types.includes('asian_grocery')) return true;\n    if (types.includes('department_store') || types.includes('shopping_mall') || types.includes('outlet')) {\n      return true;\n    }\n    if ((types.includes('supermarket') || types.includes('grocery_store')) && (/coles|woolworths|aldi/.test(name) || ((_place$userRatingCoun2 = place.userRatingCount) !== null && _place$userRatingCoun2 !== void 0 ? _place$userRatingCoun2 : 0) >= 50)) {\n      return true;\n    }\n    if (types.some(t => CATEGORY_TYPE_MAP.transport.includes(t))) return true;\n    if (types.some(t => CATEGORY_TYPE_MAP.green.includes(t)) && place.userRatingCount >= 10 && place.rating >= 3.8) {\n      return true;\n    }\n    if (types.some(t => CATEGORY_TYPE_MAP.culture.includes(t)) && place.userRatingCount >= 10 && place.rating >= 3.8) {\n      return true;\n    }\n    return false;\n  });\n  const uniquePlaces = removeDuplicatePlacesByName(filteredPlaces);\n  uniquePlaces.forEach(place => {\n    var _place$types2;\n    const matchedCategory = (_place$types2 = place.types) === null || _place$types2 === void 0 ? void 0 : _place$types2.map(t => categoryReverseLookup[t]).find(Boolean);\n    place.category = matchedCategory || null;\n  });\n  const finalPlaces = removeDuplicatePlacesByName(uniquePlaces);\n  const markers = finalPlaces.map((place, index) => {\n    const markerHTML = ReactDOMServer.renderToStaticMarkup(/*#__PURE__*/_jsxDEV(CustomerMarker, {\n      number: index + 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this));\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = markerHTML;\n    return new AdvancedMarkerElement({\n      map,\n      position: place.location,\n      title: place.displayName,\n      content: wrapper.firstChild\n    });\n  });\n  return {\n    places: finalPlaces,\n    markers\n  };\n}","map":{"version":3,"names":["ReactDOMServer","CustomerMarker","jsxDEV","_jsxDEV","normalizeName","name","toLowerCase","replace","trim","removeDuplicatePlacesByName","places","seen","Set","filter","place","norm","displayName","some","existing","includes","add","searchNearbyAmenities","map","clickedLocation","radius","includedPrimaryTypes","_transportResponse$pl","_otherResponse$places","Place","SearchNearbyRankPreference","google","maps","importLibrary","AdvancedMarkerElement","CATEGORY_TYPE_MAP","education","medical","grocery","transport","green","culture","categoryReverseLookup","category","types","Object","entries","type","allTypes","transportTypes","t","otherTypes","transportRequest","locationRestriction","center","fields","maxResultCount","rankPreference","DISTANCE","language","otherRequest","POPULARITY","transportResponse","otherResponse","Promise","all","searchNearby","filteredPlaces","_place$userRatingCoun","_place$rating","_place$types","_place$displayName$to","_place$displayName","_place$userRatingCoun2","businessStatus","userRatingCount","rating","test","uniquePlaces","forEach","_place$types2","matchedCategory","find","Boolean","finalPlaces","markers","index","markerHTML","renderToStaticMarkup","number","fileName","_jsxFileName","lineNumber","columnNumber","wrapper","document","createElement","innerHTML","position","location","title","content","firstChild"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/utils/searchNearbyAmenities.js"],"sourcesContent":["/* global google */\nimport ReactDOMServer from 'react-dom/server';\nimport CustomerMarker from '../components/Map/\bCustomMarker';\n\nfunction normalizeName(name) {\n  return name.toLowerCase()\n    .replace(/building\\s*\\d+/g, '')\n    .replace(/academic|campus|centre|center|college|institute|school|university/g, '')\n    .replace(/[^a-z0-9]/g, '')\n    .trim();\n}\n\nfunction removeDuplicatePlacesByName(places) {\n  const seen = new Set();\n  return places.filter(place => {\n    const norm = normalizeName(place.displayName);\n    if ([...seen].some(existing => norm.includes(existing) || existing.includes(norm))) {\n      return false;\n    }\n    seen.add(norm);\n    return true;\n  });\n}\n\nexport async function searchNearbyAmenities({ map, clickedLocation, radius, includedPrimaryTypes }) {\n  const { Place, SearchNearbyRankPreference } = await google.maps.importLibrary('places');\n  const { AdvancedMarkerElement } = await google.maps.importLibrary('marker');\n\n  const CATEGORY_TYPE_MAP = {\n    education: ['primary_school', 'secondary_school', 'university'],\n    medical: ['hospital', 'doctor', 'clinic'],\n    grocery: ['supermarket', 'grocery_store', 'department_store', 'shopping_mall', 'asian_grocery'],\n    transport: ['train_station', 'subway_station', 'bus_station', 'transit_station', 'light_rail_station'],\n    green: ['park', 'state_park', 'campground', 'rv_park'],\n    culture: ['museum', 'library', 'art_gallery', 'stadium', 'concert_hall'],\n  };\n\n  const categoryReverseLookup = {};\n  for (const [category, types] of Object.entries(CATEGORY_TYPE_MAP)) {\n    for (const type of types) {\n      categoryReverseLookup[type] = category;\n    }\n  }\n\n  const allTypes = includedPrimaryTypes ?? [];\n  const transportTypes = allTypes.filter(t => CATEGORY_TYPE_MAP.transport.includes(t));\n  const otherTypes = allTypes.filter(t => !CATEGORY_TYPE_MAP.transport.includes(t));\n\n  const transportRequest = {\n    locationRestriction: {\n      center: clickedLocation,\n      radius,\n    },\n    fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n    includedPrimaryTypes: transportTypes,\n    maxResultCount: 20,\n    rankPreference: SearchNearbyRankPreference.DISTANCE,\n    language: 'en-AU',\n  };\n\n  const otherRequest = {\n    locationRestriction: {\n      center: clickedLocation,\n      radius,\n    },\n    fields: ['displayName', 'location', 'businessStatus', 'types', 'rating', 'userRatingCount'],\n    includedPrimaryTypes: otherTypes,\n    maxResultCount: 20,\n    rankPreference: SearchNearbyRankPreference.POPULARITY,\n    language: 'en-AU',\n  };\n\n  const [transportResponse, otherResponse] = await Promise.all([\n    Place.searchNearby(transportRequest),\n    Place.searchNearby(otherRequest),\n  ]);\n\n  const places = [...(transportResponse.places ?? []), ...(otherResponse.places ?? [])];\n\n  const filteredPlaces = places.filter(place => {\n    if (place.businessStatus !== 'OPERATIONAL') return false;\n    if ((place.userRatingCount ?? 0) < 2) return false;\n    if ((place.rating ?? 0) < 3.8) return false;\n\n    const types = place.types ?? [];\n    const name = place.displayName?.toLowerCase() ?? '';\n\n    if (types.some(t => CATEGORY_TYPE_MAP.education.includes(t))) return true;\n\n    if ((types.includes('hospital') && name.includes('hospital')) ||\n        (types.includes('clinic') && /specialist|surgery|medical|health/.test(name))) {\n      return true;\n    }\n\n    if (types.includes('asian_grocery')) return true;\n\n    if (types.includes('department_store') || types.includes('shopping_mall') || types.includes('outlet')) {\n      return true;\n    }\n\n    if ((types.includes('supermarket') || types.includes('grocery_store')) &&\n        (/coles|woolworths|aldi/.test(name) || (place.userRatingCount ?? 0) >= 50)) {\n      return true;\n    }\n\n    if (types.some(t => CATEGORY_TYPE_MAP.transport.includes(t))) return true;\n\n    if (types.some(t => CATEGORY_TYPE_MAP.green.includes(t)) && place.userRatingCount >= 10 && place.rating >= 3.8) {\n      return true;\n    }\n\n    if (types.some(t => CATEGORY_TYPE_MAP.culture.includes(t)) && place.userRatingCount >= 10 && place.rating >= 3.8) {\n      return true;\n    }\n\n    return false;\n  });\n\n  const uniquePlaces = removeDuplicatePlacesByName(filteredPlaces);\n\n  uniquePlaces.forEach(place => {\n    const matchedCategory = place.types?.map(t => categoryReverseLookup[t]).find(Boolean);\n    place.category = matchedCategory || null;\n  });\n\n  const finalPlaces = removeDuplicatePlacesByName(uniquePlaces);\n\n  const markers = finalPlaces.map((place, index) => {\n    const markerHTML = ReactDOMServer.renderToStaticMarkup(\n      <CustomerMarker number={index + 1} />\n    );\n    const wrapper = document.createElement('div');\n    wrapper.innerHTML = markerHTML;\n    return new AdvancedMarkerElement({\n      map,\n      position: place.location,\n      title: place.displayName,\n      content: wrapper.firstChild,\n    });\n  });\n\n  return { places: finalPlaces, markers };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}