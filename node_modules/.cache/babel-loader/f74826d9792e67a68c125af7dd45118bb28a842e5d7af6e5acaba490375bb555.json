{"ast":null,"code":"// src/components/Map/fetchNearbyPlaces.js\nconst fetchNearbyPlaces = async (location, setPlaces) => {\n  const {\n    lat,\n    lng\n  } = location;\n  const radius = 800;\n  const types = ['restaurant', 'cafe', 'convenience_store', 'supermarket'];\n  const allResults = [];\n  for (const type of types) {\n    const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}`;\n    try {\n      const response = await fetch(`https://cors-anywhere.herokuapp.com/${url}`); // CORS 회피용 프록시\n      const data = await response.json();\n      if (data.status === 'OK') {\n        allResults.push(...data.results);\n      } else {\n        console.warn(`검색 실패(${type}):`, data.status);\n      }\n    } catch (error) {\n      console.error('fetchNearbyPlaces 에러:', error);\n    }\n  }\n  setPlaces(allResults);\n};\nexport default fetchNearbyPlaces;","map":{"version":3,"names":["fetchNearbyPlaces","location","setPlaces","lat","lng","radius","types","allResults","type","url","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","response","fetch","data","json","status","push","results","console","warn","error"],"sources":["/Users/jungsooyoung/Documents/software modelling/Amenity-Scope/amenity-scope/src/components/Map/fetchNearbyPlaces.jsx"],"sourcesContent":["// src/components/Map/fetchNearbyPlaces.js\nconst fetchNearbyPlaces = async (location, setPlaces) => {\n    const { lat, lng } = location;\n    const radius = 800;\n    const types = ['restaurant', 'cafe', 'convenience_store', 'supermarket'];\n  \n    const allResults = [];\n  \n    for (const type of types) {\n      const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=${radius}&type=${type}&key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}`;\n  \n      try {\n        const response = await fetch(`https://cors-anywhere.herokuapp.com/${url}`); // CORS 회피용 프록시\n        const data = await response.json();\n  \n        if (data.status === 'OK') {\n          allResults.push(...data.results);\n        } else {\n          console.warn(`검색 실패(${type}):`, data.status);\n        }\n      } catch (error) {\n        console.error('fetchNearbyPlaces 에러:', error);\n      }\n    }\n  \n    setPlaces(allResults);\n  };\n  \n  export default fetchNearbyPlaces;\n  "],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,KAAK;EACrD,MAAM;IAAEC,GAAG;IAAEC;EAAI,CAAC,GAAGH,QAAQ;EAC7B,MAAMI,MAAM,GAAG,GAAG;EAClB,MAAMC,KAAK,GAAG,CAAC,YAAY,EAAE,MAAM,EAAE,mBAAmB,EAAE,aAAa,CAAC;EAExE,MAAMC,UAAU,GAAG,EAAE;EAErB,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACxB,MAAMG,GAAG,GAAG,yEAAyEN,GAAG,IAAIC,GAAG,WAAWC,MAAM,SAASG,IAAI,QAAQE,OAAO,CAACC,GAAG,CAACC,6BAA6B,EAAE;IAEhL,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuCL,GAAG,EAAE,CAAC,CAAC,CAAC;MAC5E,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAID,IAAI,CAACE,MAAM,KAAK,IAAI,EAAE;QACxBV,UAAU,CAACW,IAAI,CAAC,GAAGH,IAAI,CAACI,OAAO,CAAC;MAClC,CAAC,MAAM;QACLC,OAAO,CAACC,IAAI,CAAC,SAASb,IAAI,IAAI,EAAEO,IAAI,CAACE,MAAM,CAAC;MAC9C;IACF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF;EAEApB,SAAS,CAACK,UAAU,CAAC;AACvB,CAAC;AAED,eAAeP,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}